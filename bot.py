import asyncio
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = "YOUR_BOT_TOKEN_HERE"
ADMIN_IDS = {123456789}  # ID –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–æ–π

# –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_balances = {}  # user_id -> int (–≤–∞–ª—é—Ç–∞)
user_referrals = {}  # user_id -> –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª user_id
user_interests = {}  # user_id -> —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
waiting_users = []  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–æ–∏—Å–∫–µ
active_chats = {}  # user_id -> —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ user_id
chat_start_times = {}  # user_id -> –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —á–∞—Ç–∞
nick_shown = set()  # –∫—Ç–æ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª –Ω–∏–∫
nick_request_tasks = {}  # user_id -> asyncio.Task –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫

# –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–Ω–∞—Ç—ã
available_interests = {
    "üéµ –ú—É–∑—ã–∫–∞": 0,
    "üéÆ –ò–≥—Ä—ã": 0,
    "üé¨ –ö–∏–Ω–æ": 0,
    "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": 0,
    "üí¨ –û–±—â–µ–Ω–∏–µ": 0,
    "üîû 18+": 50,
}

OTHER_INTERESTS_KEY = "–î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã"

# ==================== –ö–û–ú–ê–ù–î–´ ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –¥–∞–µ–º –±–∞–ª–∞–Ω—Å 0 –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if user_id not in user_balances:
        user_balances[user_id] = 0
        # –ü—ã—Ç–∞–µ–º—Å—è —Å—á–∏—Ç–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Å—ã–ª–∫–∏ /start ref123456
        if context.args:
            ref_id_str = context.args[0]
            if ref_id_str.startswith("ref"):
                try:
                    ref_id = int(ref_id_str[3:])
                    if ref_id != user_id:
                        user_referrals[user_id] = ref_id
                        user_balances[ref_id] = user_balances.get(ref_id, 0) + 10
                        await context.bot.send_message(ref_id, f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ!")
                except Exception:
                    pass

    user_interests[user_id] = []
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã.\n"
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ. –ù–∞—Ä—É—à–µ–Ω–∏–µ ‚Äî –±–∞–Ω.\n"
        "üîû –ö–æ–º–Ω–∞—Ç–∞ 18+ —Å—Ç–æ–∏—Ç 50 –º–æ–Ω–µ—Ç, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ.\n"
        "–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±–µ—Ä–µ—à—å ‚Äî –ø–æ–ø–∞–¥—ë—à—å –≤ —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–Ω–∞—Ç—É.\n"
        "–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
    )
    await show_interests_menu(user_id, context)

async def show_interests_menu(user_id, context):
    keyboard = []
    for interest, price in available_interests.items():
        keyboard.append([InlineKeyboardButton(f"{interest} {'(50 –º–æ–Ω–µ—Ç)' if price else '(–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'}", callback_data=f"interest_{interest}")])
    keyboard.append([InlineKeyboardButton(OTHER_INTERESTS_KEY, callback_data=f"interest_{OTHER_INTERESTS_KEY}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    await context.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=InlineKeyboardMarkup(keyboard))

async def interests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data.startswith("interest_"):
        interest = data[9:]
        if interest == OTHER_INTERESTS_KEY:
            user_interests[user_id] = [OTHER_INTERESTS_KEY]
            await query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {OTHER_INTERESTS_KEY}")
        else:
            if interest in user_interests.get(user_id, []):
                user_interests[user_id].remove(interest)
                await query.answer(f"–£–¥–∞–ª—ë–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî –æ—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                if OTHER_INTERESTS_KEY in user_interests.get(user_id, []):
                    user_interests[user_id] = []
                user_interests.setdefault(user_id, []).append(interest)
                await query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
        # –û–±–Ω–æ–≤–∏–º –º–µ–Ω—é —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        await update.callback_query.edit_message_reply_markup(reply_markup=await build_interests_keyboard(user_id))
    elif data == "interests_done":
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ ‚Äî —Å—Ç–∞–≤–∏–º –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        if not user_interests.get(user_id):
            user_interests[user_id] = [OTHER_INTERESTS_KEY]
        await query.answer("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        await query.edit_message_text("–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /find")

async def build_interests_keyboard(user_id):
    keyboard = []
    selected = user_interests.get(user_id, [])
    for interest, price in available_interests.items():
        text = f"{interest} {'(50 –º–æ–Ω–µ—Ç)' if price else '(–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'}"
        if interest in selected:
            text = "‚úÖ " + text
        keyboard.append([InlineKeyboardButton(text, callback_data=f"interest_{interest}")])
    other_text = OTHER_INTERESTS_KEY
    if OTHER_INTERESTS_KEY in selected:
        other_text = "‚úÖ " + other_text
    keyboard.append([InlineKeyboardButton(other_text, callback_data=f"interest_{OTHER_INTERESTS_KEY}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    return InlineKeyboardMarkup(keyboard)

# ==================== –ü–û–ò–°–ö –°–û–ë–ï–°–ï–î–ù–ò–ö–ê ====================

async def find(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in active_chats:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π (/stop)")
        return

    if user_id not in user_interests or not user_interests[user_id]:
        user_interests[user_id] = [OTHER_INTERESTS_KEY]

    if user_id not in waiting_users:
        waiting_users.append(user_id)

    await update.message.reply_text("–ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

    await try_to_pair(context)

async def try_to_pair(context: ContextTypes.DEFAULT_TYPE):
    paired = set()
    for i in range(len(waiting_users)):
        if waiting_users[i] in paired:
            continue
        user1 = waiting_users[i]
        interests1 = user_interests.get(user1, [OTHER_INTERESTS_KEY])
        if not interests1:
            interests1 = [OTHER_INTERESTS_KEY]
        for j in range(i + 1, len(waiting_users)):
            if waiting_users[j] in paired:
                continue
            user2 = waiting_users[j]
            interests2 = user_interests.get(user2, [OTHER_INTERESTS_KEY])
            if not interests2:
                interests2 = [OTHER_INTERESTS_KEY]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–∏–ª–∏ "–î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
            common = set(interests1).intersection(set(interests2))
            if not common:
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã 18+
            if "üîû 18+" in common:
                if user_balances.get(user1, 0) < 50 or user_balances.get(user2, 0) < 50:
                    # –ö—Ç–æ-—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å
                    continue

            # –ï—Å–ª–∏ –∑–¥–µ—Å—å ‚Äî –ø–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞
            # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ 18+, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if "üîû 18+" in common:
                user_balances[user1] -= 50
                user_balances[user2] -= 50
                await context.bot.send_message(user1, "üí≥ –°–ø–∏—Å–∞–Ω–∏–µ 50 –º–æ–Ω–µ—Ç –∑–∞ –¥–æ—Å—Ç—É–ø –≤ 18+ –∫–æ–º–Ω–∞—Ç—É.")
                await context.bot.send_message(user2, "üí≥ –°–ø–∏—Å–∞–Ω–∏–µ 50 –º–æ–Ω–µ—Ç –∑–∞ –¥–æ—Å—Ç—É–ø –≤ 18+ –∫–æ–º–Ω–∞—Ç—É.")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç
            active_chats[user1] = user2
            active_chats[user2] = user1
            paired.update({user1, user2})
            waiting_users.remove(user1)
            waiting_users.remove(user2)
            chat_start_times[user1] = asyncio.get_event_loop().time()
            chat_start_times[user2] = chat_start_times[user1]

            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Ç–µ–º–µ —á–∞—Ç–∞
            await context.bot.send_message(user1,
                f"üéØ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–º–∞ —á–∞—Ç–∞: {', '.join(common)}\n"
                "‚ö†Ô∏è –û–±—â–∞–π—Ç–µ—Å—å —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –∏–Ω–∞—á–µ ‚Äî –±–∞–Ω.\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, –ø–æ—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –Ω–∏–∫.")
            await context.bot.send_message(user2,
                f"üéØ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–º–∞ —á–∞—Ç–∞: {', '.join(common)}\n"
                "‚ö†Ô∏è –û–±—â–∞–π—Ç–µ—Å—å —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ, –∏–Ω–∞—á–µ ‚Äî –±–∞–Ω.\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, –ø–æ—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è –≤—ã–±–æ—Ä ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –Ω–∏–∫.")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ–±–º–µ–Ω–∞ –Ω–∏–∫–∞–º–∏
            context.application.create_task(timer_show_nick_buttons(user1, user2, context))
            return

# ==================== –¢–ê–ô–ú–ï–† –ò –ö–ù–û–ü–ö–ò –ù–ò–ö–ê ====================

async def timer_show_nick_buttons(user1, user2, context):
    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data="show_nick_yes"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="show_nick_no"),
        ]
    ]
    for user_id in (user1, user2):
        try:
            await context.bot.send_message(user_id, "10 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫?", reply_markup=InlineKeyboardMarkup(keyboard))
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫–∞–∑–∞ –Ω–∏–∫–∞
async def nick_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if user_id not in active_chats:
        await query.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ")
        return

    partner_id = active_chats[user_id]

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if data == "show_nick_yes":
        nick_shown.add(user_id)
        await query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫")
    elif data == "show_nick_no":
        nick_shown.discard(user_id)
        await query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫")
    else:
        await query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ —É–∂–µ –≤—Ç–æ—Ä–æ–π
    if partner_id in nick_shown or partner_id not in active_chats:
        # –û–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏
        if user_id in nick_shown and partner_id in nick_shown:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É
            user_nick = (await context.bot.get_chat(user_id)).username or "(–Ω–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω)"
            partner_nick = (await context.bot.get_chat(partner_id)).username or "(–Ω–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω)"
            await context.bot.send_message(user_id, f"–ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{partner_nick}")
            await context.bot.send_message(partner_id, f"–ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{user_nick}")
        else:
            # –ö—Ç–æ-—Ç–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            await context.bot.send_message(user_id, "–û–±–º–µ–Ω –Ω–∏–∫–∞–º–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è.")
            await context.bot.send_message(partner_id, "–û–±–º–µ–Ω –Ω–∏–∫–∞–º–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è.")

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –í –ß–ê–¢–ï ====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in active_chats:
        await update.message.reply_text("–í—ã –Ω–µ –≤ —á–∞—Ç–µ. –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ‚Äî /find")
        return
    partner_id = active_chats[user_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç–µ–º—ã —á–∞—Ç–∞
    user_topics = set(user_interests.get(user_id, [OTHER_INTERESTS_KEY]))
    partner_topics = set(user_interests.get(partner_id, [OTHER_INTERESTS_KEY]))
    common_topics = user_topics.intersection(partner_topics)
    # –ï—Å–ª–∏ "–î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã" ‚Äî —Ç–µ–º–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
    if OTHER_INTERESTS_KEY not in common_topics:
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–º—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        text = update.message.text.lower()
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ–º–∞ "–ú—É–∑—ã–∫–∞" ‚Äî –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–æ "–º—É–∑—ã–∫–∞" –∏–ª–∏ "–ø–µ—Å–Ω—è" –∏ —Ç.–ø.
        # –ó–¥–µ—Å—å —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ‚Äî –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ)
        if not any(topic.lower().strip("üéµüéÆüé¨‚úàÔ∏èüí¨üîû ") in text for topic in common_topics):
            await update.message.reply_text("‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç–µ–º—ã —á–∞—Ç–∞ ‚Äî –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
            await stop_chat(user_id, context, banned=True)
            return

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    try:
        await context.bot.send_message(partner_id, f"üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫: {update.message.text}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")

# ==================== –ö–û–ú–ê–ù–î–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ß–ê–¢–ê ====================

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await stop_chat(user_id, context)

async def stop_chat(user_id, context, banned=False):
    if user_id not in active_chats:
        await context.bot.send_message(user_id, "–í—ã –Ω–µ –≤ —á–∞—Ç–µ.")
        return
    partner_id = active_chats.pop(user_id)
    active_chats.pop(partner_id, None)
    chat_start_times.pop(user_id, None)
    chat_start_times.pop(partner_id, None)
    nick_shown.discard(user_id)
    nick_shown.discard(partner_id)
    if user_id in waiting_users:
        waiting_users.remove(user_id)
    if partner_id in waiting_users:
        waiting_users.remove(partner_id)

    if banned:
        await context.bot.send_message(user_id, "–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
    else:
        await context.bot.send_message(user_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
    try:
        await context.bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
    except:
        pass

# ==================== –ö–ù–û–ü–ö–ê "–ù–ê–ß–ê–¢–¨ –ù–û–í–´–ô –ß–ê–¢" ====================

async def new_chat_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await stop_chat(user_id, context)
    if user_id not in waiting_users:
        waiting_users.append(user_id)
    await query.answer("–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω.")
    await try_to_pair(context)

# ==================== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ====================

async def admin_add_money(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addmoney <user_id> <amount>")
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        user_balances[target_id] = user_balances.get(target_id, 0) + amount
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")

async def admin_remove_money(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removemoney <user_id> <amount>")
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        current = user_balances.get(target_id, 0)
        user_balances[target_id] = max(0, current - amount)
        await update.message.reply_text(f"–°–Ω—è—Ç–æ {amount} –º–æ–Ω–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("find", find))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CallbackQueryHandler(interests_callback, pattern=r"^interest_"))
    app.add_handler(CallbackQueryHandler(interests_callback, pattern="interests_done"))
    app.add_handler(CallbackQueryHandler(nick_button_handler, pattern=r"^show_nick_"))
    app.add_handler(CallbackQueryHandler(new_chat_callback, pattern="new_chat"))
    app.add_handler(CommandHandler("addmoney", admin_add_money))
    app.add_handler(CommandHandler("removemoney", admin_remove_money))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
