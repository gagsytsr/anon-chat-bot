import asyncio
import logging
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ user_id ‚Äî –≤–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–∏ ID
ADMIN_IDS = {123456789, 987654321}

waiting_users = []  # —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –≤ –ø–æ–∏—Å–∫–µ
active_chats = {}  # {user_id: partner_id}
show_name_requests = {}  # {(user1,user2): {user1: None/True/False, user2: None/True/False}}
user_agreements = {}
banned_users = set()
reported_users = {}
user_interests = {}
search_timeouts = {}
referrals = {}
invited_by = {}

# –í–∞–ª—é—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_currency = {}

# –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∏ –∫–ª—é—á–∞–º–∏
available_interests = [
    ("üéµ –ú—É–∑—ã–∫–∞", "music"),
    ("üéÆ –ò–≥—Ä—ã", "games"),
    ("üé¨ –ö–∏–Ω–æ", "movies"),
    ("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "travel"),
    ("üí¨ –û–±—â–µ–Ω–∏–µ", "chat"),
    ("üîû 18+", "adult")
]

def is_admin(user_id):
    return user_id in ADMIN_IDS

def interests_match(int1, int2):
    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π ‚Äî —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if not int1 or not int2:
        return True
    return bool(set(int1) & set(int2))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id and user_id not in invited_by:
                referrals[referrer_id] = referrals.get(referrer_id, 0) + 1
                invited_by[user_id] = referrer_id
                # –ù–∞—á–∏—Å–ª—è–µ–º 10 –≤–∞–ª—é—Ç—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                user_currency[referrer_id] = user_currency.get(referrer_id, 0) + 10
                await context.bot.send_message(referrer_id, "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! +10 –º–æ–Ω–µ—Ç")
        except Exception:
            pass

    user_agreements[user_id] = False
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n"
        "‚Ä¢ –û–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ –∫–æ–º–Ω–∞—Ç—ã ‚Äî –∏–Ω–∞—á–µ –±–∞–Ω.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    if user_id in banned_users:
        await query.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    # –°–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    if data == "agree":
        user_agreements[user_id] = True
        await show_main_menu(user_id, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    if data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        current = user_interests.get(user_id, [])
        if interest_key in current:
            current.remove(interest_key)
        else:
            current.append(interest_key)
        user_interests[user_id] = current
        await update_interests_menu(user_id, query)
        return

    if data == "interests_done":
        interests_list = user_interests.get(user_id, [])
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 18+ –∏ —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –≤–∞–ª—é—Ç—ã
        if "adult" in interests_list:
            coins = user_currency.get(user_id, 0)
            if coins < 50:
                await query.edit_message_text(
                    f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–Ω–∞—Ç–µ üîû 18+ —Ç—Ä–µ–±—É–µ—Ç—Å—è 50 –º–æ–Ω–µ—Ç.\n"
                    f"–£ –≤–∞—Å {coins} –º–æ–Ω–µ—Ç.\n"
                    f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã!"
                )
                return
            else:
                user_currency[user_id] = coins - 50
                await context.bot.send_message(user_id, "‚úÖ –°–ø–∏—Å–∞–Ω–æ 50 –º–æ–Ω–µ—Ç –∑–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ 18+.")
        display_interests = []
        for em_text, key in available_interests:
            if key in interests_list:
                display_interests.append(em_text)
        if not display_interests:
            display_interests = ["–î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã / –ù–µ –≤—ã–±—Ä–∞–Ω—ã"]
        await query.edit_message_text(
            f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(display_interests)}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
        )
        if user_id not in waiting_users:
            waiting_users.append(user_id)
        await find_partner(context)
        return

    # –ê–¥–º–∏–Ω–∫–∞ –∏ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏–∂–µ...

    if data == "new_chat":
        await end_chat(user_id, context, notify_partner=True)
        if user_id in waiting_users:
            waiting_users.remove(user_id)
        # –ó–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        chat = await context.bot.get_chat(user_id)
        await show_interests_menu(chat, user_id)
        return

    # –õ–æ–≥–∏–∫–∞ –æ–±–º–µ–Ω–∞ –Ω–∏–∫–∞–º–∏ –∏ –¥—Ä. - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, –µ—Å–ª–∏ –Ω–∞–¥–æ - –¥–æ–±–∞–≤–ª—é

async def update_interests_menu(user_id, query):
    keyboard = []
    selected = user_interests.get(user_id, [])
    for em_text, key in available_interests:
        text = f"‚úÖ {em_text}" if key in selected else em_text
        keyboard.append([InlineKeyboardButton(text, callback_data=f"interest_{key}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

async def show_main_menu(user_id, context):
    coins = user_currency.get(user_id, 0)
    keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"], [f"üí∞ –ë–∞–ª–∞–Ω—Å: {coins} –º–æ–Ω–µ—Ç"]]
    await context.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def show_interests_menu(update, user_id):
    keyboard = [[InlineKeyboardButton(em_text, callback_data=f"interest_{key}")] for em_text, key in available_interests]
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    user_interests[user_id] = []
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def find_partner(context):
    i = 0
    while i < len(waiting_users):
        u1 = waiting_users[i]
        found = False
        for j in range(i+1, len(waiting_users)):
            u2 = waiting_users[j]
            i1 = user_interests.get(u1, [])
            i2 = user_interests.get(u2, [])
            if interests_match(i1, i2):
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±–∞ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω—ã
                if u1 in banned_users or u2 in banned_users:
                    continue
                waiting_users.remove(u2)
                waiting_users.remove(u1)
                active_chats[u1] = u2
                active_chats[u2] = u1
                await context.bot.send_message(u1, "üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –æ–±—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–º–µ!")
                await context.bot.send_message(u2, "üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –æ–±—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–º–µ!")
                found = True
                break
        if not found:
            i += 1

async def end_chat(user_id, context, notify_partner=False):
    partner = active_chats.pop(user_id, None)
    if partner:
        active_chats.pop(partner, None)
        if notify_partner:
            try:
                await context.bot.send_message(partner, "üö´ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
            except Exception:
                pass

# ---------------- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ----------------

async def addcoins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addcoins <user_id> <amount>")
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        if amount <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ amount.")
        return
    user_currency[target_id] = user_currency.get(target_id, 0) + amount
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")

async def removecoins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removecoins <user_id> <amount>")
        return
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        if amount <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ amount.")
        return
    current = user_currency.get(target_id,
