import asyncio
import logging
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS = set()

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
waiting_users = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
active_chats = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {user_id: partner_id}
show_name_requests = {}  # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–∫–∞–∑ –Ω–∏–∫–∞
user_agreements = {}  # –°–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
banned_users = set()  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
reported_users = {}  # –ñ–∞–ª–æ–±—ã
search_timeouts = {}  # –¢–∞–π–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
user_interests = {}  # –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
referrals = {}  # –†–µ—Ñ–µ—Ä–∞–ª—ã
invited_by = {}  # –ö—Ç–æ –∫–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏, –∫–∞–∫ —Ç—ã –∏ –ø—Ä–æ—Å–∏–ª
available_interests = {
    "–ú—É–∑—ã–∫–∞": "üéµ", "–ò–≥—Ä—ã": "üéÆ", "–ö–∏–Ω–æ": "üé¨",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è", "–û–±—â–µ–Ω–∏–µ": "üí¨", "18+": "üîû"
}

# ====== –°–¢–ê–†–¢ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    user_id = update.effective_user.id
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id and user_id not in invited_by:
                referrals[referrer_id] = referrals.get(referrer_id, 0) + 1
                invited_by[user_id] = referrer_id
                await context.bot.send_message(referrer_id, "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!")
        except (ValueError, IndexError):
            pass

    user_agreements[user_id] = False
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ====== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö ======
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ Inline.
    """
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    if data == "agree":
        user_agreements[user_id] = True
        await show_main_menu(user_id, context)

    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        if interest_key in user_interests.get(user_id, []):
            user_interests[user_id].remove(interest_key)
        else:
            user_interests.setdefault(user_id, []).append(interest_key)

        await update_interests_menu(user_id, query)

    elif data == "interests_done":
        selected_interests = user_interests.get(user_id, [])
        interest_names = [name for name, _ in available_interests.items() if name in selected_interests]
        
        await query.edit_message_text(
            f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interest_names) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
        )
        await find_partner(context, user_id)

    elif data == "show_name_yes":
        await handle_show_name_request(user_id, context, True)

    elif data == "show_name_no":
        await handle_show_name_request(user_id, context, False)

    # ==== –ê–î–ú–ò–ù–ö–ê ====
    elif data == "admin_stats":
        total_users = len([u for u in user_agreements if user_agreements[u]])
        active_pairs = len(active_chats) // 2
        await query.message.reply_text(
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_pairs}\n"
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {len(reported_users)}\n‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}\n"
            f"üîó –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sum(referrals.values())}"
        )

    elif data == "admin_stop_all":
        for uid in list(active_chats.keys()):
            await end_chat(uid, context)
        await query.message.reply_text("üö´ –í—Å–µ —á–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

    elif data == "admin_ban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –±–∞–Ω–∞:")
        context.user_data["awaiting_ban_id"] = True

    elif data == "admin_unban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        context.user_data["awaiting_unban_id"] = True

    elif data == "admin_exit":
        ADMIN_IDS.discard(user_id)
        await query.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())

# ====== –ú–ï–ù–Æ –ò–ù–¢–ï–†–ï–°–û–í ======
async def update_interests_menu(user_id, query):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    keyboard = []
    selected_interests = user_interests.get(user_id, [])
    for interest, emoji in available_interests.items():
        text = f"‚úÖ {interest} {emoji}" if interest in selected_interests else f"{interest} {emoji}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"interest_{interest}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

# ====== –ú–ï–ù–Æ –û–°–ù–û–í–ù–û–ï ======
async def show_main_menu(user_id, context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"]]
    await context.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

# ====== –ü–û–ò–°–ö –°–û–ë–ï–°–ï–î–ù–ò–ö–ê ======
async def show_interests_menu(update, user_id):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    user_interests[user_id] = []
    keyboard = [[InlineKeyboardButton(f"{interest} {emoji}", callback_data=f"interest_{interest}")] for interest, emoji in available_interests.items()]
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def find_partner(context, user_id):
    """
    –ò—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.
    """
    user_interests_set = set(user_interests.get(user_id, []))
    for waiting_user_id in list(waiting_users):
        waiting_user_interests_set = set(user_interests.get(waiting_user_id, []))
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã: –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Å–æ–µ–¥–∏–Ω—è–µ–º
        if user_interests_set & waiting_user_interests_set:
            waiting_users.remove(waiting_user_id)
            await start_chat(context, user_id, waiting_user_id)
            return
            
    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
    if user_id not in waiting_users:
        waiting_users.append(user_id)
        
    await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏...")

async def start_chat(context, u1, u2):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    active_chats[u1] = u2
    active_chats[u2] = u1
    
    markup = ReplyKeyboardMarkup(
        [["üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"], ["üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"]],
        resize_keyboard=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º
    await context.bot.send_message(u1, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏.", reply_markup=markup)
    await context.bot.send_message(u2, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏.", reply_markup=markup)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç
    context.job_queue.run_once(ask_to_show_name, 600, chat_id=u1, context={"u1": u1, "u2": u2})

async def ask_to_show_name(context: ContextTypes.DEFAULT_TYPE):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ö–æ—Ç—è—Ç –ª–∏ –æ–Ω–∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫–∏, —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.
    """
    u1 = context.job.context["u1"]
    u2 = context.job.context["u2"]
    
    if u1 in active_chats and active_chats[u1] == u2:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫", callback_data="show_name_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="show_name_no")]
        ])
        
        # –û–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        show_name_requests[(u1, u2)] = {u1: None, u2: None}
        
        await context.bot.send_message(u1, "‚è≥ –ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç. –•–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?", reply_markup=keyboard)
        await context.bot.send_message(u2, "‚è≥ –ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç. –•–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?", reply_markup=keyboard)

async def handle_show_name_request(user_id, context, agreement):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–æ–∫–∞–∑–µ –Ω–∏–∫–∞.
    """
    partner_id = active_chats.get(user_id)
    if not partner_id:
        return

    pair_key = tuple(sorted((user_id, partner_id)))
    
    if pair_key not in show_name_requests:
        return
        
    show_name_requests[pair_key][user_id] = agreement
    
    u1_agree = show_name_requests[pair_key].get(pair_key[0])
    u2_agree = show_name_requests[pair_key].get(pair_key[1])
    
    if u1_agree is not None and u2_agree is not None:
        if u1_agree and u2_agree:
            u1_name = (await context.bot.get_chat(pair_key[0])).first_name
            u2_name = (await context.bot.get_chat(pair_key[1])).first_name
            
            await context.bot.send_message(pair_key[0], f"ü•≥ –û—Ç–ª–∏—á–Ω–æ! –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è. –ï–≥–æ –Ω–∏–∫: @{u2_name}")
            await context.bot.send_message(pair_key[1], f"ü•≥ –û—Ç–ª–∏—á–Ω–æ! –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è. –ï–≥–æ –Ω–∏–∫: @{u1_name}")
        else:
            await context.bot.send_message(pair_key[0], "üòî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –ß–∞—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º.")
            await context.bot.send_message(pair_key[1], "üòî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –ß–∞—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º.")
            
        del show_name_requests[pair_key]

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ======
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã.
    """
    user_id = update.effective_user.id
    text = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
    if context.user_data.get("awaiting_admin_password"):
        if text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(user_id)
            await show_admin_menu(update)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data["awaiting_admin_password"] = False
        return
    if context.user_data.get("awaiting_ban_id"):
        try:
            target_id = int(text)
            banned_users.add(target_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        context.user_data.pop("awaiting_ban_id")
        return
    if context.user_data.get("awaiting_unban_id"):
        try:
            target_id = int(text)
            banned_users.discard(target_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        context.user_data.pop("awaiting_unban_id")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        await show_interests_menu(update, user_id)
    elif text == "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
        await update.message.reply_text("‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º.")
        for admin in ADMIN_IDS:
            await context.bot.send_message(admin, f"‚ùó –ñ–∞–ª–æ–±–∞ –æ—Ç {user_id}")
    elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        link = f"https://t.me/{context.bot.username}?start={user_id}"
        await update.message.reply_text(f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals.get(user_id, 0)}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —á–∞—Ç–∞
    elif user_id in active_chats:
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await end_chat(user_id, context)
        elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat(user_id, context)
            await show_interests_menu(update, user_id)
        else:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
            partner_id = active_chats[user_id]
            await context.bot.send_message(partner_id, text)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–ï–î–ò–ê ======
async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.
    """
    user_id = update.effective_user.id
    if user_id in active_chats:
        partner = active_chats[user_id]
        if update.message.photo:
            await context.bot.send_photo(partner, update.message.photo[-1].file_id)
        elif update.message.video:
            await context.bot.send_video(partner, update.message.video.file_id)
        elif update.message.voice:
            await context.bot.send_voice(partner, update.message.voice.file_id)

# ====== –ö–û–ú–ê–ù–î–ê –ê–î–ú–ò–ù–ê ======
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.
    """
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await show_admin_menu(update)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        context.user_data["awaiting_admin_password"] = True

async def show_admin_menu(update: Update):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="admin_stop_all")],
        [InlineKeyboardButton("üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban")],
        [InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban")],
        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="admin_exit")]
    ])
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

# ====== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ß–ê–¢–ê ======
async def end_chat(user_id, context):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if user_id in active_chats:
        partner = active_chats.pop(user_id)
        active_chats.pop(partner, None)
        
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∏–∫–∞
        pair_key = tuple(sorted((user_id, partner)))
        if pair_key in show_name_requests:
            del show_name_requests[pair_key]

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(partner, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª.", reply_markup=ReplyKeyboardRemove())

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(user_id, context)
        await show_main_menu(partner, context)

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE, media_handler))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
