import asyncio
import logging
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS = set()

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

waiting_users = []  # —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –≤ –ø–æ–∏—Å–∫–µ
active_chats = {}  # {user_id: partner_id}
show_name_requests = {}  # {(user1,user2): {user1: None/True/False, user2: None/True/False}}
user_agreements = {}
banned_users = set()
reported_users = {}
user_interests = {}
search_timeouts = {}
referrals = {}
invited_by = {}

# –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∏ –∫–ª—é—á–∞–º–∏
available_interests = [
    ("üéµ –ú—É–∑—ã–∫–∞", "music"),
    ("üéÆ –ò–≥—Ä—ã", "games"),
    ("üé¨ –ö–∏–Ω–æ", "movies"),
    ("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "travel"),
    ("üí¨ –û–±—â–µ–Ω–∏–µ", "chat"),
    ("üîû 18+", "adult")
]

# –î–ª—è –ø–æ–∏—Å–∫–∞ - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
def interests_match(int1, int2):
    # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—ã–±—Ä–∞–ª "–¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã" (–ø—É—Å—Ç–æ) ‚Äî —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞
    if not int1 or not int2:
        return True
    # –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º
    return bool(set(int1) & set(int2))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id and user_id not in invited_by:
                referrals[referrer_id] = referrals.get(referrer_id, 0) + 1
                invited_by[user_id] = referrer_id
                await context.bot.send_message(referrer_id, "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!")
        except:
            pass

    user_agreements[user_id] = False
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    # –°–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    if data == "agree":
        user_agreements[user_id] = True
        await show_main_menu(user_id, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    if data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        current = user_interests.get(user_id, [])
        if interest_key in current:
            current.remove(interest_key)
        else:
            current.append(interest_key)
        user_interests[user_id] = current
        await update_interests_menu(user_id, query)
        return

    if data == "interests_done":
        interests_list = user_interests.get(user_id, [])
        display_interests = []
        for em_text, key in available_interests:
            if key in interests_list:
                display_interests.append(em_text)
        if not display_interests:
            display_interests = ["–î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã / –ù–µ –≤—ã–±—Ä–∞–Ω—ã"]
        await query.edit_message_text(
            f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(display_interests)}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å —É—á—ë—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        if user_id not in waiting_users:
            waiting_users.append(user_id)
        await find_partner(context)
        return

    # –ê–¥–º–∏–Ω–∫–∞
    if data == "admin_stats":
        total_users = len([u for u in user_agreements if user_agreements[u]])
        active_pairs = len(active_chats) // 2
        await query.message.reply_text(
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_pairs}\n"
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {len(reported_users)}\n‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}\n"
            f"üîó –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sum(referrals.values())}"
        )
        return

    if data == "admin_stop_all":
        for uid in list(active_chats.keys()):
            await end_chat(uid, context)
        await query.message.reply_text("üö´ –í—Å–µ —á–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        return

    if data == "admin_ban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –±–∞–Ω–∞:")
        context.user_data["awaiting_ban_id"] = True
        return

    if data == "admin_unban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        context.user_data["awaiting_unban_id"] = True
        return

    if data == "admin_exit":
        ADMIN_IDS.discard(user_id)
        await query.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())
        return

    # –ö–Ω–æ–ø–∫–∏ –∏–∑ —á–∞—Ç–∞

    # –ù–æ–≤—ã–π —á–∞—Ç
    if data == "new_chat":
        await end_chat(user_id, context, notify_partner=True)
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–∏—Å–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if user_id in waiting_users:
            waiting_users.remove(user_id)
        await show_interests_menu(await context.bot.get_chat(user_id), user_id)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫ (—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç)
    if data.startswith("show_nick_"):
        partner = active_chats.get(user_id)
        if not partner:
            await query.message.reply_text("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ.")
            return
        answer = data.split("_")[-1]  # yes / no
        key = tuple(sorted((user_id, partner)))
        show_name_requests.setdefault(key, {user_id: None, partner: None})
        show_name_requests[key][user_id] = (answer == "yes")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –æ–±–∞
        votes = show_name_requests[key]
        if None in votes.values():
            # –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ
            await query.message.reply_text("‚úÖ –í–∞—à –≤—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç, –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        else:
            # –û–±–∞ –≤—ã–±—Ä–∞–ª–∏
            if all(votes.values()):
                # –û–±–∞ —Å–æ–≥–ª–∞—Å–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∏
                user1, user2 = key
                try:
                    await context.bot.send_message(user1, f"üë§ –ù–∏–∫ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{(await context.bot.get_chat(user2)).username or '–Ω–µ—Ç –Ω–∏–∫–∞'}")
                    await context.bot.send_message(user2, f"üë§ –ù–∏–∫ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{(await context.bot.get_chat(user1)).username or '–Ω–µ—Ç –Ω–∏–∫–∞'}")
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∏–∫–∞: {e}")
            else:
                # –ö—Ç–æ-—Ç–æ –æ—Ç–∫–∞–∑–∞–ª—Å—è
                await context.bot.send_message(user_id, "‚ùå –û–±–º–µ–Ω –Ω–∏–∫–∞–º–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è.")
                partner_id = active_chats.get(user_id)
                if partner_id:
                    await context.bot.send_message(partner_id, "‚ùå –û–±–º–µ–Ω –Ω–∏–∫–∞–º–∏ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è.")

            # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å
            show_name_requests.pop(key, None)

        return

async def update_interests_menu(user_id, query):
    keyboard = []
    selected = user_interests.get(user_id, [])
    for em_text, key in available_interests:
        text = f"‚úÖ {em_text}" if key in selected else em_text
        keyboard.append([InlineKeyboardButton(text, callback_data=f"interest_{key}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))

async def show_main_menu(user_id, context):
    keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"]]
    await context.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def show_interests_menu(update, user_id):
    keyboard = [[InlineKeyboardButton(em_text, callback_data=f"interest_{key}")] for em_text, key in available_interests]
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    user_interests[user_id] = []
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

async def find_partner(context):
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º waiting_users –∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–∞—Ä—É —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ –∏–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π
    i = 0
    while i < len(waiting_users):
        u1 = waiting_users[i]
        found = False
        for j in range(i+1, len(waiting_users)):
            u2 = waiting_users[j]
            i1 = user_interests.get(u1, [])
            i2 = user_interests.get(u2, [])
            if interests_match(i1, i2):
                # –ù–∞—à–ª–∏ –ø–∞—Ä—É
                # –£–¥–∞–ª—è–µ–º –æ–±–æ–∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                waiting_users.remove(u2)
                waiting_users.remove(u1)
                # –°–≤—è–∑—ã–≤–∞–µ–º
                active_chats[u1] = u2
                active_chats[u2] = u1
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º show
