import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

if not TOKEN or not ADMIN_PASSWORD:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω TOKEN –∏–ª–∏ ADMIN_PASSWORD –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –∏ MarkdownV2
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2))
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ —á–∞—Ç–∞—Ö
waiting_users = {}
active_chats = {}
user_data = {}

SEARCH_TIMEOUT = 120  # 2 –º–∏–Ω—É—Ç—ã
CHAT_DURATION = 600   # 10 –º–∏–Ω—É—Ç


async def start_search(user_id):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    waiting_users[user_id] = datetime.now()
    await bot.send_message(user_id, "üîç –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    await asyncio.sleep(SEARCH_TIMEOUT)

    if user_id in waiting_users:
        del waiting_users[user_id]
        await bot.send_message(user_id, "‚è≥ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")


async def connect_users(user1, user2):
    """–°–æ–µ–¥–∏–Ω—è–µ—Ç –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç."""
    active_chats[user1] = user2
    active_chats[user2] = user1
    waiting_users.pop(user1, None)
    waiting_users.pop(user2, None)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫", callback_data="show_nick")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="stop_chat")]
    ])

    await bot.send_message(user1, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω\\! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=kb)
    await bot.send_message(user2, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω\\! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=kb)

    await asyncio.sleep(CHAT_DURATION)
    if user1 in active_chats and user2 in active_chats:
        await stop_chat(user1)


async def stop_chat(user_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."""
    partner_id = active_chats.get(user_id)
    if partner_id:
        await bot.send_message(user_id, "‚èπ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await bot.send_message(partner_id, "‚èπ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        active_chats.pop(user_id, None)
        active_chats.pop(partner_id, None)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_data[message.from_user.id] = {"username": message.from_user.username}
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç\\! –ù–∞–∂–º–∏ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\\.\\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–π /admin \\<–ø–∞—Ä–æ–ª—å\\>\\."
    )


@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search."""
    uid = message.from_user.id
    if uid in waiting_users or uid in active_chats:
        return await message.answer("‚è≥ –í—ã —É–∂–µ –∏—â–µ—Ç–µ –∏–ª–∏ –æ–±—â–∞–µ—Ç–µ—Å—å.")
    if waiting_users:
        partner_id = list(waiting_users.keys())[0]
        await connect_users(uid, partner_id)
    else:
        asyncio.create_task(start_search(uid))


@dp.callback_query(lambda c: c.data == "stop_chat")
async def callback_stop_chat(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞."""
    await stop_chat(call.from_user.id)


@dp.callback_query(lambda c: c.data == "show_nick")
async def callback_show_nick(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∏–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."""
    partner_id = active_chats.get(call.from_user.id)
    if partner_id:
        partner_username = user_data.get(partner_id, {}).get("username", "‚Äî")
        await bot.send_message(call.from_user.id, f"üë§ –ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @{partner_username}")


@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    args = message.text.split()
    if len(args) != 2:
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–ø–∞—Ä–æ–ª—å>")
    if args[1] != ADMIN_PASSWORD:
        return await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="admin_stop_all")]
    ])
    await message.answer("üîê –ê–¥–º–∏–Ω\\-–ø–∞–Ω–µ–ª—å", reply_markup=kb)


@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    total_users = len(user_data)
    active_pairs = len(active_chats) // 2
    await call.message.answer(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {total_users}\n"
                              f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_pairs}")


@dp.callback_query(lambda c: c.data == "admin_stop_all")
async def admin_stop_all(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤."""
    for uid in list(active_chats.keys()):
        await stop_chat(uid)
    await call.message.answer("üö´ –í—Å–µ —á–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")


@dp.message()
async def relay_message(message: types.Message):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ."""
    if message.from_user.id in active_chats:
        await bot.send_message(active_chats[message.from_user.id], message.text)


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
