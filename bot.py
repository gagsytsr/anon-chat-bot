import asyncio
import logging
import os
import re
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import requests

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS = set()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è API –∫–ª—é—á–∞ Hugging Face.
HUGGING_FACE_TOKEN = os.environ.get("HUGGING_FACE_TOKEN")

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
waiting_users = []
active_chats = {}
show_name_requests = {}
user_agreements = {}
banned_users = set()
reported_users = {}
search_timeouts = {}
user_interests = {}
referrals = {}
invited_by = {}
user_balance = {}
unlocked_18plus = set()
warnings = {}
chat_history = {}
chat_timers = {}

# –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á-—Ç–∞–π–º–µ—Ä–æ–≤
active_tasks = {}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏
available_interests = {
    "–ú—É–∑—ã–∫–∞": "üéµ", "–ò–≥—Ä—ã": "üéÆ", "–ö–∏–Ω–æ": "üé¨",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è", "–û–±—â–µ–Ω–∏–µ": "üí¨", "18+": "üîû"
}

# ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
REWARD_FOR_REFERRAL = 10
COST_FOR_18PLUS = 50
COST_FOR_UNBAN = 100
COST_FOR_PHOTO = 50
MAX_WARNINGS = 3
HUGGING_FACE_API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-small"

# ====== –°–¢–ê–†–¢ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    user_id = update.effective_user.id
    
    if user_id in banned_users:
        await show_main_menu(user_id, context)
        return
    
    if user_id not in user_balance:
        user_balance[user_id] = 0

    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id and user_id not in invited_by:
                referrals[referrer_id] = referrals.get(referrer_id, 0) + 1
                invited_by[user_id] = referrer_id
                user_balance[referrer_id] = user_balance.get(referrer_id, 0) + REWARD_FOR_REFERRAL
                await context.bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REWARD_FOR_REFERRAL} –≤–∞–ª—é—Ç—ã.")
        except (ValueError, IndexError):
            pass

    user_agreements[user_id] = False
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ====== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö ======
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ Inline.
    """
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    if data == "unban_request":
        if user_balance.get(user_id, 0) >= COST_FOR_UNBAN:
            user_balance[user_id] -= COST_FOR_UNBAN
            banned_users.discard(user_id)
            warnings[user_id] = 0
            await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {COST_FOR_UNBAN} –≤–∞–ª—é—Ç—ã. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balance.get(user_id, 0)}. –°—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω.")
            await show_main_menu(user_id, context)
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_UNBAN}. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance.get(user_id, 0)}.")
        return
    
    if data == "agree":
        user_agreements[user_id] = True
        await query.message.delete()
        await show_main_menu(user_id, context)

    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        if interest_key in user_interests.get(user_id, []):
            user_interests[user_id].remove(interest_key)
        else:
            user_interests.setdefault(user_id, []).append(interest_key)

        await update_interests_menu(user_id, query)

    elif data == "interests_done":
        selected_interests = user_interests.get(user_id, [])
        interest_names = [name for name, _ in available_interests.items() if name in selected_interests]

        if not selected_interests:
            await query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.",
                                          reply_markup=await get_interests_keyboard(user_id))
            return
        
        if user_id in banned_users:
            await query.edit_message_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
            return

        if "18+" in selected_interests and user_id not in unlocked_18plus:
            if user_balance.get(user_id, 0) >= COST_FOR_18PLUS:
                user_balance[user_id] -= COST_FOR_18PLUS
                unlocked_18plus.add(user_id)
                await query.edit_message_text(
                    f"‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —á–∞—Ç 18+ –∑–∞ {COST_FOR_18PLUS} –≤–∞–ª—é—Ç—ã. –¢–µ–ø–µ—Ä—å –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!\n"
                    f"–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interest_names) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞ 18+ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_18PLUS}). –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance.get(user_id, 0)}."
                )
                user_interests[user_id].remove("18+")
                return
        else:
             await query.edit_message_text(
                f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interest_names) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..."
            )
        
        await find_partner(context, user_id)

    elif data == "show_name_yes":
        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.reply_text("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫. –ñ–¥–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        await handle_show_name_request(user_id, context, True)

    elif data == "show_name_no":
        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.reply_text("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫. –ß–∞—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º.")
        await handle_show_name_request(user_id, context, False)
    
    elif data.startswith("report_reason_"):
        reason = data.replace("report_reason_", "")
        partner_id = active_chats.get(user_id)
        if not partner_id:
            await query.message.reply_text("‚ùå –ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        report_text = f"‚ùó **–ñ–∞–ª–æ–±–∞**\n" \
                      f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`\n" \
                      f"–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{partner_id}`\n" \
                      f"–ü—Ä–∏—á–∏–Ω–∞: `{reason}`\n\n" \
                      f"**–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:**\n{chat_history.get(user_id, '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')}"
        
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(admin_id, report_text, parse_mode='Markdown')
        
        await query.message.reply_text("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ß–∞—Ç –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await end_chat(user_id, context)

    # ==== –ê–î–ú–ò–ù–ö–ê ====
    elif data == "admin_stats":
        total_users = len([u for u in user_agreements if user_agreements[u]])
        active_pairs = len(active_chats) // 2
        await query.message.reply_text(
            f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_pairs}\n"
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {len(reported_users)}\n‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}\n"
            f"üîó –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sum(referrals.values())}\nüí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {sum(user_balance.values())}"
        )

    elif data == "admin_stop_all":
        for uid in list(active_chats.keys()):
            await end_chat(uid, context)
        await query.message.reply_text("üö´ –í—Å–µ —á–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

    elif data == "admin_ban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –±–∞–Ω–∞:")
        context.user_data["awaiting_ban_id"] = True

    elif data == "admin_unban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        context.user_data["awaiting_unban_id"] = True

    elif data == "admin_add_currency":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 100):")
        context.user_data["awaiting_add_currency"] = True

    elif data == "admin_remove_currency":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 50):")
        context.user_data["awaiting_remove_currency"] = True

    elif data == "admin_exit":
        ADMIN_IDS.discard(user_id)
        await query.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())

# ====== –ú–ï–ù–Æ –ò–ù–¢–ï–†–ï–°–û–í ======
async def get_interests_keyboard(user_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    keyboard = []
    selected_interests = user_interests.get(user_id, [])
    for interest, emoji in available_interests.items():
        text = f"‚úÖ {interest} {emoji}" if interest in selected_interests else f"{interest} {emoji}"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"interest_{interest}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –ì–æ—Ç–æ–≤–æ", callback_data="interests_done")])
    return InlineKeyboardMarkup(keyboard)

async def update_interests_menu(user_id, query):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    await query.edit_message_reply_markup(reply_markup=await get_interests_keyboard(user_id))

# ====== –ú–ï–ù–Æ –û–°–ù–û–í–ù–û–ï ======
async def show_main_menu(user_id, context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    if user_id in banned_users:
        keyboard = [[InlineKeyboardButton(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞ {COST_FOR_UNBAN} –≤–∞–ª—é—Ç—ã", callback_data="unban_request")]]
        await context.bot.send_message(user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"]]
        await context.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

# ====== –ü–û–ò–°–ö –°–û–ë–ï–°–ï–î–ù–ò–ö–ê ======
async def show_interests_menu(update, user_id):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.
    """
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return
    
    if user_id in active_chats:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    user_interests[user_id] = []
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=await get_interests_keyboard(user_id))

async def find_partner(context, user_id):
    """
    –ò—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.
    """
    user_interests_set = set(user_interests.get(user_id, []))
    
    for waiting_user_id in list(waiting_users):
        waiting_user_interests_set = set(user_interests.get(waiting_user_id, []))
        if user_interests_set & waiting_user_interests_set:
            waiting_users.remove(waiting_user_id)
            await start_chat(context, user_id, waiting_user_id)
            return

    if user_id not in waiting_users:
        waiting_users.append(user_id)
        
    await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏...")

# ====== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–£–°–ö–ê –¢–ê–ô–ú–ï–†–ê ======
async def chat_timer_task(context, u1, u2):
    try:
        await asyncio.sleep(600)  # –ñ–¥—ë–º 10 –º–∏–Ω—É—Ç
        if u1 in active_chats and active_chats[u1] == u2:
            await ask_to_show_name(context, u1, u2)
    except asyncio.CancelledError:
        pass

async def start_chat(context, u1, u2):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    """
    active_chats[u1] = u2
    active_chats[u2] = u1
    
    markup = ReplyKeyboardMarkup(
        [["üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"], ["üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"], ["‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"], ["üí° –ò–¥–µ—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"]],
        resize_keyboard=True
    )

    await context.bot.send_message(u1, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏.", reply_markup=markup)
    await context.bot.send_message(u2, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏.", reply_markup=markup)
    
    task = asyncio.create_task(chat_timer_task(context, u1, u2))
    pair_key = tuple(sorted((u1, u2)))
    active_tasks[pair_key] = task


def update_chat_history(user_id, partner_id, message):
    if user_id not in chat_history:
        chat_history[user_id] = ""
    if partner_id not in chat_history:
        chat_history[partner_id] = ""
    
    history_message = f"**{user_id}**: {message}\n"
    chat_history[user_id] += history_message
    chat_history[partner_id] += history_message

async def ask_to_show_name(context: ContextTypes.DEFAULT_TYPE, u1, u2):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ö–æ—Ç—è—Ç –ª–∏ –æ–Ω–∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫–∏, —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.
    """
    if u1 in active_chats and active_chats[u1] == u2:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫", callback_data="show_name_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="show_name_no")]
        ])
        
        show_name_requests[(u1, u2)] = {u1: None, u2: None}
        
        await context.bot.send_message(u1, "‚è≥ –ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç. –•–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?", reply_markup=keyboard)
        await context.bot.send_message(u2, "‚è≥ –ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç. –•–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?", reply_markup=keyboard)
        
        try:
            await asyncio.sleep(180) # –ñ–¥—ë–º 3 –º–∏–Ω—É—Ç—ã
            if u1 in active_chats and active_chats[u1] == u2:
                pair_key = tuple(sorted((u1, u2)))
                if pair_key in show_name_requests:
                    await end_chat(u1, context)
                    await context.bot.send_message(u1, "‚ö†Ô∏è –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
                    await context.bot.send_message(u2, "‚ö†Ô∏è –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except asyncio.CancelledError:
            pass


async def handle_show_name_request(user_id, context, agreement):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–æ–∫–∞–∑–µ –Ω–∏–∫–∞.
    """
    partner_id = active_chats.get(user_id)
    if not partner_id:
        return

    pair_key = tuple(sorted((user_id, partner_id)))
    
    if pair_key not in show_name_requests:
        return
        
    show_name_requests[pair_key][user_id] = agreement
    
    u1_agree = show_name_requests[pair_key].get(pair_key[0])
    u2_agree = show_name_requests[pair_key].get(pair_key[1])
    
    if u1_agree is not None and u2_agree is not None:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É —Ç–∞–π–º–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        task = active_tasks.pop(pair_key, None)
        if task:
            task.cancel()

        if u1_agree and u2_agree:
            u1_info = await context.bot.get_chat(pair_key[0])
            u2_info = await context.bot.get_chat(pair_key[1])
            
            u1_name = f"@{u1_info.username}" if u1_info.username else u1_info.first_name
            u2_name = f"@{u2_info.username}" if u2_info.username else u2_info.first_name
            
            await context.bot.send_message(pair_key[0], f"ü•≥ –û—Ç–ª–∏—á–Ω–æ! –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è. –ï–≥–æ –Ω–∏–∫: {u2_name}\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ.")
            await context.bot.send_message(pair_key[1], f"ü•≥ –û—Ç–ª–∏—á–Ω–æ! –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è. –ï–≥–æ –Ω–∏–∫: {u1_name}\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ.")
        else:
            await context.bot.send_message(pair_key[0], "üòî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –ß–∞—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º.")
            await context.bot.send_message(pair_key[1], "üòî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –ß–∞—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º.")
            await end_chat(user_id, context)
            
        del show_name_requests[pair_key]

# ====== AI —Ñ—É–Ω–∫—Ü–∏—è ======
async def get_ai_response(prompt):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    if not HUGGING_FACE_TOKEN:
        return "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è HUGGING_FACE_TOKEN."

    headers = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 50,
            "return_full_text": False
        }
    }
    
    try:
        response = requests.post(HUGGING_FACE_API_URL, headers=headers, json=payload, timeout=10)
        response.raise_for_status()
        result = response.json()
        if isinstance(result, list) and len(result) > 0 and 'generated_text' in result[0]:
            return result[0]['generated_text']
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face API: {e}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}"

async def ai_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–∏ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.
    """
    user_id = update.effective_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        
        prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–¥–µ–π –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫:"
        await context.bot.send_message(user_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏...")
        
        response_text = await get_ai_response(prompt)
        
        await context.bot.send_message(user_id, f"üí° **–ò–¥–µ–∏ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞**:\n{response_text}", parse_mode='Markdown')
        await context.bot.send_message(partner_id, f"üí° **–ò–¥–µ–∏ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞**:\n{response_text}", parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥—è—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.")

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ======
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã.
    """
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞" and user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
    if context.user_data.get("awaiting_admin_password"):
        if text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(user_id)
            await show_admin_menu(update)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data["awaiting_admin_password"] = False
        return
    if context.user_data.get("awaiting_ban_id"):
        try:
            target_id = int(text)
            banned_users.add(target_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞ {COST_FOR_UNBAN} –≤–∞–ª—é—Ç—ã", callback_data="unban_request")]])
            await context.bot.send_message(target_id, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.", reply_markup=keyboard)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        context.user_data.pop("awaiting_ban_id")
        return
    if context.user_data.get("awaiting_unban_id"):
        try:
            target_id = int(text)
            banned_users.discard(target_id)
            warnings[target_id] = 0
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            await context.bot.send_message(target_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –°—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        context.user_data.pop("awaiting_unban_id")
        return
    if context.user_data.get("awaiting_add_currency"):
        try:
            target_id, amount = map(int, text.split())
            user_balance[target_id] = user_balance.get(target_id, 0) + amount
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –≤–∞–ª—é—Ç—ã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[target_id]}.")
            await context.bot.send_message(target_id, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount} –≤–∞–ª—é—Ç—ã. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance[target_id]}.")
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        context.user_data.pop("awaiting_add_currency")
        return
    if context.user_data.get("awaiting_remove_currency"):
        try:
            target_id, amount = map(int, text.split())
            user_balance[target_id] = user_balance.get(target_id, 0) - amount
            user_balance[target_id] = max(0, user_balance[target_id])
            await update.message.reply_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –∏–∑—ä—è—Ç–æ {amount} –≤–∞–ª—é—Ç—ã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balance[target_id]}.")
            await context.bot.send_message(target_id, f"‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑—ä—è–ª —É –≤–∞—Å {amount} –≤–∞–ª—é—Ç—ã. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance[target_id]}.")
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        context.user_data.pop("awaiting_remove_currency")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        await show_interests_menu(update, user_id)
    elif text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
        if user_id in active_chats:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–µ –ø–æ —Ç–µ–º–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="report_reason_off_topic")],
                [InlineKeyboardButton("–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è", callback_data="report_reason_insult")],
                [InlineKeyboardButton("–ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="report_reason_content")],
                [InlineKeyboardButton("–†–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="report_reason_private_info")]
            ])
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:", reply_markup=keyboard)
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É.")
    elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        link = f"https://t.me/{context.bot.username}?start={user_id}"
        await update.message.reply_text(f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals.get(user_id, 0)}")
    elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        balance = user_balance.get(user_id, 0)
        await update.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")
    elif text == "üí° –ò–¥–µ—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞":
        await ai_handler(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —á–∞—Ç–∞
    elif user_id in active_chats:
        partner_id = active_chats[user_id]
        
        if partner_id in banned_users:
            del active_chats[user_id]
            await update.message.reply_text("‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
            await show_main_menu(user_id, context)
            return

        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await end_chat(user_id, context)
        elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat(user_id, context)
            await show_interests_menu(update, user_id)
        else:
            update_chat_history(user_id, partner_id, text)
            
            if re.search(r'@?\s*[A-Za-z0-9_]{5,}', text) or any(s in text.lower() for s in ['–Ω–∏–∫', 'username', 'telegram']):
                warnings[user_id] = warnings.get(user_id, 0) + 1
                if warnings[user_id] >= MAX_WARNINGS:
                    banned_users.add(user_id)
                    del active_chats[partner_id]
                    del active_chats[user_id]
                    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞ {COST_FOR_UNBAN} –≤–∞–ª—é—Ç—ã", callback_data="unban_request")]])
                    await update.message.reply_text(f"‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞–∑–≥–ª–∞—Å–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ–ø–ª–∞—Ç–∏—Ç–µ {COST_FOR_UNBAN} –≤–∞–ª—é—Ç—ã.", reply_markup=keyboard)
                    await context.bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                    del chat_history[user_id]
                    del chat_history[partner_id]
                    await show_main_menu(partner_id, context)
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings[user_id]}/{MAX_WARNINGS}: –ù–µ–ª—å–∑—è —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—â—ë {MAX_WARNINGS - warnings[user_id]} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–∞–Ω–∞.")
            else:
                await context.bot.send_message(partner_id, text)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–ï–î–ò–ê ======
async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.
    """
    user_id = update.effective_user.id
    if user_id in banned_users:
        return
    
    if user_id in active_chats:
        partner = active_chats[user_id]
        if partner in banned_users:
            await update.message.reply_text("‚ùå –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            await end_chat(user_id, context)
            await show_main_menu(user_id, context)
            return

        if update.message.photo:
            if user_balance.get(user_id, 0) >= COST_FOR_PHOTO:
                user_balance[user_id] -= COST_FOR_PHOTO
                await context.bot.send_photo(partner, update.message.photo[-1].file_id)
                await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {COST_FOR_PHOTO} –≤–∞–ª—é—Ç—ã.")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –°—Ç–æ–∏–º–æ—Å—Ç—å: {COST_FOR_PHOTO}. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance.get(user_id, 0)}.")
        elif update.message.video:
            await context.bot.send_video(partner, update.message.video.file_id)
        elif update.message.voice:
            await context.bot.send_voice(partner, update.message.voice.file_id)

# ====== –ö–û–ú–ê–ù–î–ê –ê–î–ú–ò–ù–ê ======
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.
    """
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await show_admin_menu(update)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        context.user_data["awaiting_admin_password"] = True

async def show_admin_menu(update: Update):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí∞ –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="admin_add_currency")],
        [InlineKeyboardButton("üí∏ –ó–∞–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="admin_remove_currency")],
        [InlineKeyboardButton("üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="admin_stop_all")],
        [InlineKeyboardButton("üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="admin_ban")],
        [InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="admin_unban")],
        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="admin_exit")]
    ])
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

# ====== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ß–ê–¢–ê ======
async def end_chat(user_id, context):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if user_id in active_chats:
        partner = active_chats.pop(user_id)
        active_chats.pop(partner, None)

        pair_key = tuple(sorted((user_id, partner)))
        if pair_key in show_name_requests:
            del show_name_requests[pair_key]

        task = active_tasks.pop(pair_key, None)
        if task:
            task.cancel()

        await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(partner, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª.", reply_markup=ReplyKeyboardRemove())
        
        if user_id in chat_history:
            del chat_history[user_id]
        if partner in chat_history:
            del chat_history[partner]

        await show_main_menu(user_id, context)
        await show_main_menu(partner, context)

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE, media_handler))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
