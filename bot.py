from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.ext.filters import BaseFilter
import asyncio
import logging
import os
import sys
from collections import defaultdict
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ========== –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD')
ADMIN_IDS = set()

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    sys.exit(1)

waiting_users = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
active_chats = {}
show_name_requests = {}
user_agreements = {}
banned_users = set()
reported_users = {}
search_timeouts = {}

available_interests = ["–ú—É–∑—ã–∫–∞", "–ò–≥—Ä—ã", "–ö–∏–Ω–æ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°–ø–æ—Ä—Ç", "–ö–Ω–∏–≥–∏"]
user_interests = defaultdict(list)

referrals = {}
invited_by = {}

# ========== –§–ò–õ–¨–¢–†–´ ==========
class NotAdminFilter(BaseFilter):
    def filter(self, message):
        return message.from_user.id not in ADMIN_IDS

not_admin_filter = NotAdminFilter()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
    if update and update.effective_chat:
        logging.error(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update} –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É {context.error} –≤ —á–∞—Ç–µ {update.effective_chat.id}")

# ========== –ú–ï–ù–Æ ==========
async def show_agree_menu(update: Update, user_id: int):
    keyboard = [["‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    agreement_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    if update:
        await update.message.reply_text(agreement_text, reply_markup=markup)
    else:
        await app.bot.send_message(user_id, agreement_text, reply_markup=markup)

async def show_main_menu(update: Update, user_id: int):
    keyboard = [["üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"], ["üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    if update:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        await app.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def show_interests_menu(update: Update, user_id: int):
    keyboard = [[interest] for interest in available_interests]
    keyboard.append(["‚û°Ô∏è –ì–æ—Ç–æ–≤–æ"])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=markup
    )

async def show_search_menu(update: Update, user_id: int):
    markup = ReplyKeyboardMarkup(
        [["üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"]],
        resize_keyboard=True
    )
    await update.message.reply_text("‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=markup)

async def show_chat_menu(update: Update, user_id: int):
    markup = ReplyKeyboardMarkup(
        [["üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"], ["üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –Ω–∏–∫", "üôà –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–π –Ω–∏–∫"]],
        resize_keyboard=True
    )
    if update:
        await update.message.reply_text("üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å.", reply_markup=markup)
    else:
        await app.bot.send_message(user_id, "üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –û–±—â–∞–π—Ç–µ—Å—å.", reply_markup=markup)

# ========== –ê–°–ò–ù–•–†–û–ù–ù–´–ï –ó–ê–î–ê–ß–ò ==========
async def search_timeout_task(user_id, timeout):
    await asyncio.sleep(timeout)
    if user_id in waiting_users:
        del waiting_users[user_id]
        if user_id in search_timeouts:
            del search_timeouts[user_id]
        await app.bot.send_message(user_id, "‚è≥ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(None, user_id)

async def find_partner(context):
    if len(waiting_users) >= 2:
        user1_id = list(waiting_users.keys())[0]
        user2_id = list(waiting_users.keys())[1]

        waiting_users.pop(user1_id, None)
        waiting_users.pop(user2_id, None)

        if user1_id in search_timeouts:
            search_timeouts.pop(user1_id).cancel()
        if user2_id in search_timeouts:
            search_timeouts.pop(user2_id).cancel()
            
        active_chats[user1_id] = user2_id
        active_chats[user2_id] = user1_id
        show_name_requests[(user1_id, user2_id)] = {user1_id: None, user2_id: None}
        
        await show_chat_menu(None, user1_id)
        await show_chat_menu(None, user2_id)


# ========== –°–¢–ê–†–¢ –ò –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in banned_users:
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id and user_id not in invited_by:
                if referrer_id not in referrals:
                    referrals[referrer_id] = 0
                referrals[referrer_id] += 1
                invited_by[user_id] = referrer_id
                await context.bot.send_message(referrer_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
                logging.info(f"User {user_id} was invited by {referrer_id}")
        except (ValueError, IndexError):
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")

    if user_agreements.get(user_id, False):
        await update.message.reply_text("–í—ã —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        await show_main_menu(update, user_id)
    else:
        await show_agree_menu(update, user_id)

async def referrals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    referral_count = referrals.get(user_id, 0)
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    await update.message.reply_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: `{referral_link}`\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: `{referral_count}`",
        parse_mode='Markdown'
    )

# ========== –ü–û–ò–°–ö –ò –ß–ê–¢ ==========
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id in banned_users:
        return
    
    if user_id in ADMIN_IDS:
        await admin_menu_handler(update, context)
        return

    if context.user_data.get('awaiting_admin_password'):
        await password_handler(update, context)
        return

    if text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω" and not user_agreements.get(user_id, False):
        user_agreements[user_id] = True
        await update.message.reply_text("‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        await show_main_menu(update, user_id)
        return

    if not user_agreements.get(user_id, False):
        await update.message.reply_text("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è /start.")
        return

    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        if user_id in waiting_users or user_id in active_chats:
            await update.message.reply_text("‚è≥ –ü–æ–∏—Å–∫ —É–∂–µ –∏–¥—ë—Ç –∏–ª–∏ –≤—ã –≤ —á–∞—Ç–µ.")
            return
        await show_interests_menu(update, user_id)
        return

    if text in available_interests:
        if user_id in active_chats: # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ, —Ç–æ –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
            await context.bot.send_message(active_chats[user_id], text)
        else:
            user_interests[user_id].append(text)
            await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å: {text}.")
        return

    if text == "‚û°Ô∏è –ì–æ—Ç–æ–≤–æ":
        if user_id in active_chats:
             await context.bot.send_message(active_chats[user_id], text)
        else:
            await update.message.reply_text(f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_interests.get(user_id, [])) or '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}.\n–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            waiting_users[user_id] = user_interests.get(user_id, [])
            await show_search_menu(update, user_id)
            search_timeouts[user_id] = asyncio.create_task(search_timeout_task(user_id, 120))
            await find_partner(context)
        return

    if user_id in active_chats:
        partner_id = active_chats[user_id]
        if text:
            await context.bot.send_message(partner_id, text)
            return
        
    if text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
        if user_id in waiting_users:
            waiting_users.pop(user_id, None)
            timeout_task = search_timeouts.pop(user_id, None)
            if timeout_task:
                timeout_task.cancel()
            await update.message.reply_text("‚úÖ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
            await show_main_menu(update, user_id)
        else:
            await update.message.reply_text("‚ùóÔ∏è–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ.")
        return

    elif text == "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
        if user_id in active_chats:
            partner_id = active_chats[user_id]
            reported_users[user_id] = partner_id
            await update.message.reply_text("‚ö†Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–∏—Ç—É–∞—Ü–∏—é.")
            for admin_id in ADMIN_IDS:
                await context.bot.send_message(
                    admin_id,
                    f"‚ùó **–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!**\n"
                    f"–ü–æ–∂–∞–ª–æ–≤–∞–ª—Å—è: `{user_id}` (–Ω–∏–∫: @{update.effective_user.username})\n"
                    f"–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{partner_id}`",
                    parse_mode='Markdown'
                )
        else:
            await update.message.reply_text("‚ùóÔ∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É.")
        return
            
    elif text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
        await end_chat(update, context)
        return
        
    elif text == "üë§ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –Ω–∏–∫":
        await handle_show_name_request(update, context, agree=True)
        return
    elif text == "üôà –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–π –Ω–∏–∫":
        await handle_show_name_request(update, context, agree=False)
        return
    elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        await referrals_command(update, context)
        return
    elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
        await end_chat(update, context)
        return
    elif text:
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        
        if update.message.photo:
            await context.bot.send_photo(partner_id, photo=update.message.photo[-1].file_id, caption=update.message.caption)
        elif update.message.video:
            await context.bot.send_video(partner_id, video=update.message.video.file_id, caption=update.message.caption)
        elif update.message.voice:
            await context.bot.send_voice(partner_id, voice=update.message.voice.file_id, caption=update.message.caption)
        elif update.message.sticker:
            await context.bot.send_sticker(partner_id, sticker=update.message.sticker.file_id)

async def handle_show_name_request(update: Update, context: ContextTypes.DEFAULT_TYPE, agree: bool):
    user_id = update.effective_user.id
    if user_id not in active_chats:
        await update.message.reply_text("‚ùóÔ∏è–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ —á–∞—Ç–µ.")
        return

    partner_id = active_chats[user_id]
    chat_key = tuple(sorted((user_id, partner_id)))

    if chat_key not in show_name_requests:
        await update.message.reply_text("‚ùóÔ∏è–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    show_name_requests[chat_key][user_id] = agree
    other_agree = show_name_requests[chat_key][partner_id]

    if other_agree is None:
        await update.message.reply_text("‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    elif agree and other_agree:
        name1 = f"@{(await context.bot.get_chat(user_id)).username or '–ë–µ–∑ –Ω–∏–∫–∞'}"
        name2 = f"@{(await context.bot.get_chat(partner_id)).username or '–ë–µ–∑ –Ω–∏–∫–∞'}"
        await update.message.reply_text(f"üîì –ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name2}")
        await context.bot.send_message(partner_id, f"üîì –ù–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {name1}")
    else:
        await update.message.reply_text("‚ùå –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫.")
        await context.bot.send_message(partner_id, "‚ùå –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫.")

async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)
        
        await update.message.reply_text("‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(update, user_id)
        await show_main_menu(None, partner_id)
    else:
        await update.message.reply_text("‚ùóÔ∏è–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.")

# ========== –ê–î–ú–ò–ù–ö–ê ==========
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await show_admin_menu(update)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
        context.user_data['awaiting_admin_password'] = True

async def password_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_admin_password'):
        if update.message.text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(update.effective_user.id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=ReplyKeyboardRemove())
            await show_admin_menu(update)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data['awaiting_admin_password'] = False

async def show_admin_menu(update: Update):
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ôªÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã"],
        ["üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å", "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å"],
        ["üîê –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=markup)

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return

    text = update.message.text
    
    if not text:
        logging.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ admin_menu_handler.")
        return
    
    if "awaiting_ban_id" in context.user_data:
        try:
            target_id = int(text)
            banned_users.add(target_id)
            await context.bot.send_message(target_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_id}` –∑–∞–±–∞–Ω–µ–Ω.")
        except (ValueError, Exception):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            del context.user_data["awaiting_ban_id"]
        return
        
    if "awaiting_unban_id" in context.user_data:
        try:
            target_id = int(text)
            if target_id in banned_users:
                banned_users.remove(target_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_id}` —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_id}` –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
        except (ValueError, Exception):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        finally:
            del context.user_data["awaiting_unban_id"]
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–∏–ª–æ—Å—å: {len([u for u in user_agreements.values() if u])}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(active_chats)//2}\n"
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {len(reported_users)}\n"
            f"‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned_users)}\n"
            f"üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sum(referrals.values())}"
        )
    elif text == "‚ôªÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã":
        active_chat_users = list(active_chats.keys())
        for uid in active_chat_users:
            if uid in active_chats:
                await end_chat(update, context)
        await update.message.reply_text("üîÑ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    elif text == "üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å:")
        context.user_data["awaiting_ban_id"] = True
    elif text == "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å:")
        context.user_data["awaiting_unban_id"] = True
    elif text == "üîê –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        ADMIN_IDS.discard(user_id)
        await update.message.reply_text("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 5000))
    WEBHOOK_URL = os.environ.get('WEBHOOK_URL', "https://test-1-1-zard.onrender.com")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_error_handler(error_handler)
    
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('admin', admin_command))

    app.add_handler(MessageHandler(filters.TEXT & filters.User(user_id=ADMIN_IDS), admin_menu_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE | filters.Sticker.ALL, media_handler))

    app.run_webhook(listen="0.0.0.0", port=PORT, url_path=BOT_TOKEN, webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}")

