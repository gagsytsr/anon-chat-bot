import asyncio
import logging
import os
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

import database
import keyboards

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS_STR = os.environ.get("ADMIN_IDS", "")
ADMIN_IDS = {int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()}
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    exit(1)
REWARD_FOR_REFERRAL = 10
COST_FOR_18PLUS = 50
COST_FOR_UNBAN = 100
MAX_WARNINGS = 3
available_interests = {
    "–ú—É–∑—ã–∫–∞": "üéµ", "–ò–≥—Ä—ã": "üéÆ", "–ö–∏–Ω–æ": "üé¨",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è", "–û–±—â–µ–Ω–∏–µ": "üí¨", "18+": "üîû"
}

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await database.ensure_user(user.id, user.username)
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id != user.id:
            await database.ensure_user(referrer_id)
            if await database.add_referral(referrer_id, user.id):
                await database.update_balance(referrer_id, REWARD_FOR_REFERRAL)
                try:
                    await context.bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REWARD_FOR_REFERRAL} –≤–∞–ª—é—Ç—ã."
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboards.get_agreement_keyboard()
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await show_admin_menu(update)
    elif ADMIN_PASSWORD:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        context.user_data["awaiting_admin_password"] = True
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# ====== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ú–ï–ù–Æ ======
async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    if await database.is_user_banned(user_id):
        await context.bot.send_message(
            user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=keyboards.get_unban_keyboard(COST_FOR_UNBAN)
        )
    else:
        await context.bot.send_message(
            user_id, "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )

async def show_interests_menu(update: Update, user_id: int, context: ContextTypes.DEFAULT_TYPE):
    if await database.is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return
    if await database.get_partner_id(user_id):
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return
    context.user_data['selected_interests'] = []
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=await keyboards.get_interests_keyboard(user_id, {user_id: []}, available_interests)
    )

async def show_admin_menu(update: Update):
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboards.get_admin_keyboard())

# ====== –õ–û–ì–ò–ö–ê –ß–ê–¢–ê ======
async def start_search_logic(user_id: int, interests: list, context: ContextTypes.DEFAULT_TYPE):
    partner_id = await database.find_partner_in_queue(user_id, interests)
    if partner_id:
        await database.remove_from_search_queue(partner_id)
        await start_chat(context, user_id, partner_id)
    else:
        await database.add_to_search_queue(user_id, interests)
        await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏...")

async def start_chat(context: ContextTypes.DEFAULT_TYPE, u1: int, u2: int):
    await database.create_chat(u1, u2)
    markup = keyboards.get_chat_keyboard()
    msg = "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ."
    await context.bot.send_message(u1, msg, reply_markup=markup)
    await context.bot.send_message(u2, msg, reply_markup=markup)

async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE, initiator_message: str, partner_message: str):
    chat_pair = await database.delete_chat(user_id)
    if chat_pair:
        u1, u2 = chat_pair
        initiator_id = user_id
        partner_id = u2 if u1 == user_id else u1
        await context.bot.send_message(initiator_id, initiator_message, reply_markup=ReplyKeyboardRemove())
        await show_main_menu(initiator_id, context)
        await context.bot.send_message(partner_id, partner_message, reply_markup=ReplyKeyboardRemove())
        await show_main_menu(partner_id, context)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö (CALLBACK) ======
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await database.ensure_user(user.id, user.username)
    await query.answer()
    data = query.data

    # --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    if data == "agree":
        await query.message.delete()
        await show_main_menu(user.id, context)

    elif data == "unban_request":
        balance = await database.get_balance(user.id)
        if balance >= COST_FOR_UNBAN:
            await database.update_balance(user.id, -COST_FOR_UNBAN)
            await database.unban_user(user.id)
            await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à –±–∞–ª–∞–Ω—Å: {await database.get_balance(user.id)}.")
            await show_main_menu(user.id, context)
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_UNBAN}.")

    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        selected = context.user_data.get('selected_interests', [])
        if interest_key in selected:
            selected.remove(interest_key)
        else:
            selected.append(interest_key)
        context.user_data['selected_interests'] = selected
        temp_user_interests = {user.id: selected}
        await query.edit_message_reply_markup(
            reply_markup=await keyboards.get_interests_keyboard(user.id, temp_user_interests, available_interests)
        )

    elif data == "interests_done":
        selected = context.user_data.get('selected_interests', [])
        if not selected:
            await query.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.", show_alert=True)
            return
        if "18+" in selected and not await database.has_unlocked_18plus(user.id):
            balance = await database.get_balance(user.id)
            if balance >= COST_FOR_18PLUS:
                await database.update_balance(user.id, -COST_FOR_18PLUS)
                await database.unlock_18plus(user.id)
                await query.edit_message_text(f"‚úÖ –ß–∞—Ç 18+ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ {COST_FOR_18PLUS} –≤–∞–ª—é—Ç—ã!")
            else:
                await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è 18+ (–Ω—É–∂–Ω–æ {COST_FOR_18PLUS}).", show_alert=True)
                context.user_data.get('selected_interests', []).remove("18+")
                return
        await query.edit_message_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã: {', '.join(selected)}. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")
        await start_search_logic(user.id, selected, context)
        context.user_data.pop('selected_interests', None)

    # --- –ö–ù–û–ü–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---
    if user.id not in ADMIN_IDS and data.startswith("admin_"):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True)
        return

    if data == "admin_ban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ë–ê–ù–ê:")
        context.user_data["awaiting_ban_id"] = True
    elif data == "admin_unban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –†–ê–ó–ë–ê–ù–ê:")
        context.user_data["awaiting_unban_id"] = True
    elif data == "admin_add_currency":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `12345 100`):", parse_mode="MarkdownV2")
        context.user_data["awaiting_add_currency"] = True
    elif data == "admin_stats":
        await query.message.reply_text("üìä –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif data == "admin_remove_currency":
        await query.message.reply_text("üí∏ –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif data == "admin_stop_all":
        await query.message.reply_text("üö´ –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif data == "admin_exit":
        await query.message.edit_text("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ======
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    await database.ensure_user(user.id, user.username)

    if await database.is_user_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # --- –õ–æ–≥–∏–∫–∞ –ê–î–ú–ò–ù-–í–í–û–î–ê ---
    if user.id in ADMIN_IDS:
        if context.user_data.get("awaiting_ban_id"):
            try:
                target_id = int(text)
                await database.ensure_user(target_id)
                await database.ban_user(target_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
                await context.bot.send_message(target_id, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            finally:
                context.user_data.pop("awaiting_ban_id")
            return

        if context.user_data.get("awaiting_unban_id"):
            try:
                target_id = int(text)
                await database.unban_user(target_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
                await context.bot.send_message(target_id, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–Ω—è–ª —Å –≤–∞—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            finally:
                context.user_data.pop("awaiting_unban_id")
            return
            
        if context.user_data.get("awaiting_add_currency"):
            try:
                target_id_str, amount_str = text.split()
                target_id = int(target_id_str)
                amount = int(amount_str)
                await database.update_balance(target_id, amount)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –≤–∞–ª—é—Ç—ã.")
                await context.bot.send_message(target_id, f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount} –≤–∞–ª—é—Ç—ã.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            finally:
                context.user_data.pop("awaiting_add_currency")
            return

    if context.user_data.get("awaiting_admin_password"):
        if text == ADMIN_PASSWORD:
            ADMIN_IDS.add(user.id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
            await show_admin_menu(update)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data.pop("awaiting_admin_password")
        return

    # --- –õ–æ–≥–∏–∫–∞ —á–∞—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    partner_id = await database.get_partner_id(user.id)
    if partner_id:
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await end_chat(user.id, context, "‚ùå –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.", "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
        elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat(user.id, context, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            await show_interests_menu(update, user.id, context)
        elif text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:", reply_markup=keyboards.get_report_reasons_keyboard())
        else:
            await context.bot.send_message(partner_id, text)
        return
    
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        await show_interests_menu(update, user.id, context)
    elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        balance = await database.get_balance(user.id)
        await update.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")
    elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        count = await database.get_referral_count(user.id)
        bot_username = (await context.bot.get_me()).username
        link = f"https://t.me/{bot_username}?start={user.id}"
        await update.message.reply_text(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{link}`\n\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}", parse_mode='MarkdownV2')
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=keyboards.get_main_menu_keyboard())

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main() -> None:
    try:
        await database.init_db()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –û—à–∏–±–∫–∞: {e}")
        return
    
    async with database.db_pool.acquire() as conn:
        await conn.execute("DELETE FROM search_queue;")
        await conn.execute("DELETE FROM active_chats;")
    logging.info("–°—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã.")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    async with app:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await app.start()
        await app.updater.start_polling()
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        
        # Keep the script running
        while True:
            await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
