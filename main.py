import asyncio
import logging
import os
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import database
import keyboards

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS_STR = os.environ.get("ADMIN_IDS", "")
ADMIN_IDS = {int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()}

if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

REWARD_FOR_REFERRAL = 10
COST_FOR_UNBAN = 100
available_interests = {"–ú—É–∑—ã–∫–∞": "üéµ", "–ò–≥—Ä—ã": "üéÆ", "–ö–∏–Ω–æ": "üé¨", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è", "–û–±—â–µ–Ω–∏–µ": "üí¨"}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await database.ensure_user(user.id, user.username)
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id != user.id:
            await database.ensure_user(referrer_id)
            if await database.add_referral(referrer_id, user.id):
                await database.update_balance(referrer_id, REWARD_FOR_REFERRAL)
                try:
                    await context.bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REWARD_FOR_REFERRAL} –≤–∞–ª—é—Ç—ã.")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {e}")
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.", reply_markup=keyboards.get_agreement_keyboard())

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in ADMIN_IDS:
        context.user_data['is_admin_mode'] = True
        await update.message.reply_text("üîê –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=keyboards.get_admin_reply_keyboard())
    elif ADMIN_PASSWORD:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        context.user_data["awaiting_admin_password"] = True
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    if await database.is_user_banned(user_id):
        await context.bot.send_message(user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboards.get_unban_keyboard(COST_FOR_UNBAN))
    else:
        await context.bot.send_message(user_id, "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboards.get_main_menu_keyboard())

async def start_search_logic(user_id: int, interests: list, context: ContextTypes.DEFAULT_TYPE):
    partner_id = await database.find_partner_in_queue(user_id, interests)
    if partner_id:
        await database.remove_from_search_queue(partner_id)
        await start_chat(context, user_id, partner_id)
    else:
        await database.add_to_search_queue(user_id, interests)
        await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

async def start_chat(context: ContextTypes.DEFAULT_TYPE, u1: int, u2: int):
    markup = keyboards.get_chat_keyboard()
    msg = "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ."
    await context.bot.send_message(u1, msg, reply_markup=markup)
    await context.bot.send_message(u2, msg, reply_markup=markup)
    await database.create_chat(u1, u2)

async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE, initiator_message: str, partner_message: str):
    chat_pair = await database.delete_chat(user_id)
    if chat_pair:
        partner_id = chat_pair[1] if chat_pair[0] == user_id else chat_pair[0]
        await context.bot.send_message(user_id, initiator_message, reply_markup=ReplyKeyboardRemove())
        await show_main_menu(user_id, context)
        await context.bot.send_message(partner_id, partner_message, reply_markup=ReplyKeyboardRemove())
        await show_main_menu(partner_id, context)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    await database.ensure_user(user.id, user.username)
    data = query.data

    if data == "agree":
        await query.message.delete()
        await show_main_menu(user.id, context)

    elif data == "unban_request":
        if await database.get_balance(user.id) >= COST_FOR_UNBAN:
            await database.update_balance(user.id, -COST_FOR_UNBAN)
            await database.unban_user(user.id)
            await query.edit_message_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
            await show_main_menu(user.id, context)
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_UNBAN}.")

    elif data.startswith("interest_"):
        interest = data.split("_", 1)[1]
        selected = context.user_data.setdefault('selected_interests', [])
        if interest in selected: selected.remove(interest)
        else: selected.append(interest)
        await query.edit_message_reply_markup(reply_markup=await keyboards.get_interests_keyboard(user.id, {user.id: selected}, available_interests))

    elif data == "interests_done":
        selected = context.user_data.get('selected_interests', [])
        if not selected:
            return await query.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.", show_alert=True)
        await query.edit_message_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")
        await start_search_logic(user.id, selected, context)

    elif data == "admin_confirm_stop_all":
        if user.id not in ADMIN_IDS: return
        chat_user_ids = await database.get_all_active_chat_users()
        await database.clear_all_active_chats()
        stopped_count = len(chat_user_ids) // 2
        await query.edit_message_text(f"‚úÖ –í—Å–µ {stopped_count} —á–∞—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
        for user_id in chat_user_ids:
            try:
                await context.bot.send_message(user_id, "üö´ –í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=ReplyKeyboardRemove())
                await show_main_menu(user_id, context)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")

    elif data == "admin_cancel_stop_all":
        if user.id not in ADMIN_IDS: return
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    await database.ensure_user(user.id, user.username)

    if await database.is_user_banned(user.id):
        return

    if context.user_data.get("awaiting_admin_password"):
        if text == ADMIN_PASSWORD:
            ADMIN_IDS.add(user.id)
            context.user_data['is_admin_mode'] = True
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.", reply_markup=keyboards.get_admin_reply_keyboard())
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data.pop("awaiting_admin_password")
        return

    # --- –ê–î–ú–ò–ù-–†–ï–ñ–ò–ú ---
    if context.user_data.get('is_admin_mode'):
        # ... (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—Å—è –ª–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ –∏–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        # ...
        if text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞":
            context.user_data.pop('is_admin_mode')
            await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=keyboards.get_main_menu_keyboard())
        # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
        return

    # --- –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú ---
    partner_id = await database.get_partner_id(user.id)
    if partner_id:
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await end_chat(user.id, context, "‚ùå –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.", "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
        elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat(user.id, context, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
            # ... –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
        else:
            await context.bot.send_message(partner_id, text)
        return

    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        if await database.get_partner_id(user.id):
            return await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ.")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=await keyboards.get_interests_keyboard(user.id, context.user_data.get('selected_interests', {}), available_interests))
    
    elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        balance = await database.get_balance(user.id)
        await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}")

    elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        bot_username = (await context.bot.get_me()).username
        link = f"https://t.me/{bot_username}?start={user.id}"
        await update.message.reply_text(f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: `{link}`", parse_mode="MarkdownV2")

async def main() -> None:
    try:
        await database.init_db()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
        return
    
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    async with app:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await app.start()
        await app.updater.start_polling()
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
