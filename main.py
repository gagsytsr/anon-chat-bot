# main.py
import asyncio
import logging
import os
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

import database
import keyboards

# ... (–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS = set()

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

REWARD_FOR_REFERRAL = 10
COST_FOR_18PLUS = 50
COST_FOR_UNBAN = 100
COST_FOR_PHOTO = 50
MAX_WARNINGS = 3

# --- –£–ë–ò–†–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ---
# waiting_users -> –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É search_queue
# active_chats -> –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É active_chats
# show_name_requests -> –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ context.bot_data –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Ç.–∫. —ç—Ç–æ –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# active_tasks -> –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –±—É–¥–µ—Ç –≤ –ø–∞–º—è—Ç–∏, —Ç.–∫. –∑–∞–¥–∞—á–∏ –Ω–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
active_tasks = {}
# user_interests -> –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É search_queue

available_interests = {
    "–ú—É–∑—ã–∫–∞": "üéµ", "–ò–≥—Ä—ã": "üéÆ", "–ö–∏–Ω–æ": "üé¨",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è", "–û–±—â–µ–Ω–∏–µ": "üí¨", "18+": "üîû"
}
# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await database.ensure_user(user.id, user.username)

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∞)
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id != user.id:
            await database.ensure_user(referrer_id) 
            if await database.add_referral(referrer_id, user.id):
                await database.update_balance(referrer_id, REWARD_FOR_REFERRAL)
                try:
                    await context.bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REWARD_FOR_REFERRAL} –≤–∞–ª—é—Ç—ã."
                    )
                except Exception:
                    # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
                    pass

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboards.get_agreement_keyboard()
    )


# ... (admin_command –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# ====== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ú–ï–ù–Æ ======
async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if await database.is_user_banned(user_id):
        await context.bot.send_message(
            user_id,
            "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.",
            reply_markup=keyboards.get_unban_keyboard(COST_FOR_UNBAN)
        )
    else:
        await context.bot.send_message(
            user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )

async def show_interests_menu(update: Update, user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤."""
    if await database.is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —á–∞—Ç–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await database.get_partner_id(user_id):
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ user_data, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª "–ì–æ—Ç–æ–≤–æ"
    context.user_data['selected_interests'] = []
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=await keyboards.get_interests_keyboard(user_id, {user_id: []}, available_interests)
    )

# ... (show_admin_menu –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# ====== –õ–û–ì–ò–ö–ê –ß–ê–¢–ê (–ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ê) ======

async def start_search_logic(user_id: int, interests: list, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."""
    # –ò—â–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å—Ä–∞–∑—É
    partner_id = await database.find_partner_in_queue(user_id, interests)
    
    if partner_id:
        # –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω!
        await database.remove_from_search_queue(partner_id) # –£–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        await start_chat(context, user_id, partner_id)
    else:
        # –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ –æ—á–µ—Ä–µ–¥—å
        await database.add_to_search_queue(user_id, interests)
        await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏...")

async def start_chat(context: ContextTypes.DEFAULT_TYPE, u1: int, u2: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –ë–î)."""
    await database.create_chat(u1, u2)
    
    markup = keyboards.get_chat_keyboard()
    msg = "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ."
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –ª–æ–≥–∏–∫–∞ —Ç–∞ –∂–µ
    await context.bot.send_message(u1, msg, reply_markup=markup)
    await context.bot.send_message(u2, msg, reply_markup=markup)

async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE, initiator_message: str, partner_message: str):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    chat_pair = await database.delete_chat(user_id)
    if chat_pair:
        u1, u2 = chat_pair
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –µ—Å—Ç—å –∫—Ç–æ
        initiator_id = user_id
        partner_id = u2 if u1 == user_id else u1

        await context.bot.send_message(initiator_id, initiator_message, reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(partner_id, partner_message, reply_markup=ReplyKeyboardRemove())
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–æ–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(initiator_id, context)
        await show_main_menu(partner_id, context)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö (CALLBACK) ======
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö inline-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    user = query.from_user
    await database.ensure_user(user.id, user.username)
    await query.answer()
    data = query.data
    
    # ... (–∫–Ω–æ–ø–∫–∏ agree –∏ unban_request –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    # --- –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞) ---
    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        selected = context.user_data.get('selected_interests', [])
        
        if interest_key in selected:
            selected.remove(interest_key)
        else:
            selected.append(interest_key)
        context.user_data['selected_interests'] = selected

        # get_interests_keyboard –æ–∂–∏–¥–∞–µ—Ç dict, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        temp_user_interests = {user.id: selected}
        
        await query.edit_message_reply_markup(
            reply_markup=await keyboards.get_interests_keyboard(user.id, temp_user_interests, available_interests)
        )

    elif data == "interests_done":
        selected = context.user_data.get('selected_interests', [])
        if not selected:
            await query.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 18+
        if "18+" in selected and not await database.has_unlocked_18plus(user.id):
            balance = await database.get_balance(user.id)
            if balance >= COST_FOR_18PLUS:
                await database.update_balance(user.id, -COST_FOR_18PLUS)
                await database.unlock_18plus(user.id)
                await query.edit_message_text(f"‚úÖ –ß–∞—Ç 18+ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ {COST_FOR_18PLUS} –≤–∞–ª—é—Ç—ã!")
            else:
                await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è 18+ (–Ω—É–∂–Ω–æ {COST_FOR_18PLUS}).", show_alert=True)
                # –£–¥–∞–ª—è–µ–º 18+ –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                context.user_data['selected_interests'].remove("18+")
                return
        
        await query.edit_message_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã: {', '.join(selected)}. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞
        await start_search_logic(user.id, selected, context)
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('selected_interests', None)

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ======
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user = update.effective_user
    await database.ensure_user(user.id, user.username)
    text = update.message.text

    if await database.is_user_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
        
    # ... (–õ–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω-–≤–≤–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    
    # --- –ö–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é ---
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        await show_interests_menu(update, user.id, context)
    # ... (–±–∞–ª–∞–Ω—Å, —Ä–µ—Ñ–µ—Ä–∞–ª—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    # --- –õ–æ–≥–∏–∫–∞ –≤ —á–∞—Ç–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–∞) ---
    else:
        partner_id = await database.get_partner_id(user.id)
        if partner_id:
            if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
                await end_chat(user.id, context, "‚ùå –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.", "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.")
            elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
                await end_chat(user.id, context, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
                await show_interests_menu(update, user.id, context)
            elif text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:", reply_markup=keyboards.get_report_reasons_keyboard())
            else:
                # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                await context.bot.send_message(partner_id, text)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ - –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=keyboards.get_main_menu_keyboard())


# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        await database.init_db()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –û—à–∏–±–∫–∞: {e}")
        return
    
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≤–∏—Å–ª–∏
    async with database.db_pool.acquire() as conn:
        await conn.execute("DELETE FROM search_queue;")
        await conn.execute("DELETE FROM active_chats;")
    
    logging.info("–°—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã.")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
