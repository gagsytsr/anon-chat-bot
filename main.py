# main.py

import asyncio
import logging
import os
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import database
import keyboards

# ... (–ù–ê–°–¢–†–û–ô–ö–ò –∏ –ö–û–ù–°–¢–ê–ù–¢–´ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS_STR = os.environ.get("ADMIN_IDS", "")
ADMIN_IDS = {int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()}
if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    exit(1)
REWARD_FOR_REFERRAL = 10
COST_FOR_18PLUS = 50
COST_FOR_UNBAN = 100
MAX_WARNINGS = 3
available_interests = {
    "–ú—É–∑—ã–∫–∞": "üéµ", "–ò–≥—Ä—ã": "üéÆ", "–ö–∏–Ω–æ": "üé¨",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è", "–û–±—â–µ–Ω–∏–µ": "üí¨", "18+": "üîû"
}

# ... (—Ñ—É–Ω–∫—Ü–∏–∏ start, show_main_menu, show_interests_menu –∏ —Ç.–¥. –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ admin_command) ...
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await database.ensure_user(user.id, user.username)
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id != user.id:
            await database.ensure_user(referrer_id)
            if await database.add_referral(referrer_id, user.id):
                await database.update_balance(referrer_id, REWARD_FOR_REFERRAL)
                try:
                    await context.bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REWARD_FOR_REFERRAL} –≤–∞–ª—é—Ç—ã."
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboards.get_agreement_keyboard()
    )
async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    if await database.is_user_banned(user_id):
        await context.bot.send_message(
            user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=keyboards.get_unban_keyboard(COST_FOR_UNBAN)
        )
    else:
        await context.bot.send_message(
            user_id, "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
async def show_interests_menu(update: Update, user_id: int, context: ContextTypes.DEFAULT_TYPE):
    if await database.is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return
    if await database.get_partner_id(user_id):
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return
    context.user_data['selected_interests'] = []
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=await keyboards.get_interests_keyboard(user_id, {user_id: []}, available_interests)
    )
async def start_search_logic(user_id: int, interests: list, context: ContextTypes.DEFAULT_TYPE):
    partner_id = await database.find_partner_in_queue(user_id, interests)
    if partner_id:
        await database.remove_from_search_queue(partner_id)
        await start_chat(context, user_id, partner_id)
    else:
        await database.add_to_search_queue(user_id, interests)
        await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏...")
async def start_chat(context: ContextTypes.DEFAULT_TYPE, u1: int, u2: int):
    await database.create_chat(u1, u2)
    markup = keyboards.get_chat_keyboard()
    msg = "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ."
    await context.bot.send_message(u1, msg, reply_markup=markup)
    await context.bot.send_message(u2, msg, reply_markup=markup)
async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE, initiator_message: str, partner_message: str):
    chat_pair = await database.delete_chat(user_id)
    if chat_pair:
        u1, u2 = chat_pair
        initiator_id = user_id
        partner_id = u2 if u1 == user_id else u1
        await context.bot.send_message(initiator_id, initiator_message, reply_markup=ReplyKeyboardRemove())
        await show_main_menu(initiator_id, context)
        await context.bot.send_message(partner_id, partner_message, reply_markup=ReplyKeyboardRemove())
        await show_main_menu(partner_id, context)

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê /admin
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user = update.effective_user
    if user.id in ADMIN_IDS:
        context.user_data['is_admin_mode'] = True
        await update.message.reply_text(
            "üîê –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=keyboards.get_admin_reply_keyboard()
        )
    elif ADMIN_PASSWORD:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        context.user_data["awaiting_admin_password"] = True
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await database.ensure_user(user.id, user.username)
    await query.answer()
    data = query.data

    if data == "agree":
        await query.message.delete()
        await show_main_menu(user.id, context)

    elif data == "unban_request":
        # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        pass

    elif data.startswith("interest_") or data == "interests_done":
        # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        pass
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–æ–≤
    elif data == "admin_confirm_stop_all":
        if user.id not in ADMIN_IDS: return
        
        chat_user_ids = await database.get_all_active_chat_users()
        await database.clear_all_active_chats()
        
        stopped_count = len(chat_user_ids) // 2
        await query.edit_message_text(f"‚úÖ –í—Å–µ {stopped_count} —á–∞—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

        for user_id in chat_user_ids:
            try:
                await context.bot.send_message(
                    user_id,
                    "üö´ –í–∞—à —á–∞—Ç –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    reply_markup=ReplyKeyboardRemove()
                )
                await show_main_menu(user_id, context)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
    
    elif data == "admin_cancel_stop_all":
        if user.id not in ADMIN_IDS: return
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    await database.ensure_user(user.id, user.username)

    if await database.is_user_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # --- –õ–û–ì–ò–ö–ê –í–•–û–î–ê –í –ê–î–ú–ò–ù–ö–£ –ü–û –ü–ê–†–û–õ–Æ ---
    if context.user_data.get("awaiting_admin_password"):
        if text == ADMIN_PASSWORD:
            ADMIN_IDS.add(user.id)
            context.user_data['is_admin_mode'] = True
            await update.message.reply_text(
                "‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=keyboards.get_admin_reply_keyboard()
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data.pop("awaiting_admin_password")
        return

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ò–ó –ê–î–ú–ò–ù-–ö–õ–ê–í–ò–ê–¢–£–†–´ ---
    if context.user_data.get('is_admin_mode'):
        # –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞
        if text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞":
            context.user_data.pop('is_admin_mode')
            await update.message.reply_text(
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=keyboards.get_main_menu_keyboard()
            )
            return

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        if text == "üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ë–ê–ù–ê:")
            context.user_data["awaiting_ban_id"] = True
            return
        if text == "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –†–ê–ó–ë–ê–ù–ê:")
            context.user_data["awaiting_unban_id"] = True
            return
        if text == "üí∞ –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É":
            await update.message.reply_text("ID –∏ —Å—É–º–º–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä. `12345 100`):", parse_mode="MarkdownV2")
            context.user_data["awaiting_add_currency"] = True
            return
        if text == "üí∏ –ó–∞–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É":
            await update.message.reply_text("ID –∏ —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä. `12345 50`):", parse_mode="MarkdownV2")
            context.user_data["awaiting_remove_currency"] = True
            return

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            stats = await database.get_bot_statistics()
            await update.message.reply_text(
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*\n"
                f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: *{stats['banned_users']}*\n"
                f"üí¨ –í —á–∞—Ç–∞—Ö —Å–µ–π—á–∞—Å: *{stats['users_in_chats']}*\n"
                f"‚è≥ –í –ø–æ–∏—Å–∫–µ —Å–µ–π—á–∞—Å: *{stats['users_in_queue']}*",
                parse_mode="MarkdownV2"
            )
            return
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã":
            await update.message.reply_text(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã?",
                reply_markup=keyboards.get_stop_all_confirmation_keyboard()
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        if context.user_data.get("awaiting_ban_id"):
            # ... (–ª–æ–≥–∏–∫–∞ –±–∞–Ω–∞)
            pass
        if context.user_data.get("awaiting_unban_id"):
            # ... (–ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∞–Ω–∞)
            pass
        if context.user_data.get("awaiting_add_currency"):
            # ... (–ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã)
            pass
        if context.user_data.get("awaiting_remove_currency"):
            try:
                target_id_str, amount_str = text.split()
                target_id = int(target_id_str)
                amount = -abs(int(amount_str)) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
                await database.update_balance(target_id, amount)
                await update.message.reply_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–ø–∏—Å–∞–Ω–æ {-amount} –≤–∞–ª—é—Ç—ã.")
                await context.bot.send_message(target_id, f"üí∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª —Å –≤–∞—Å {-amount} –≤–∞–ª—é—Ç—ã.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            finally:
                context.user_data.pop("awaiting_remove_currency")
            return

    # --- –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ë–´–ß–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
    # ... (–≤–µ—Å—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫–æ–¥ message_handler –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass


# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main() -> None:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pass

if __name__ == "__main__":
    asyncio.run(main())
