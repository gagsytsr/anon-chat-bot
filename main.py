import asyncio
import logging
import os
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from telegram.error import Forbidden

import database
import keyboards

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await database.ensure_user(user.id, user.username)
    # ... (–∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!",
        reply_markup=keyboards.get_agreement_keyboard()
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if await database.is_admin(user_id):
        await update.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboards.get_admin_keyboard())
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        context.user_data['awaiting_admin_password'] = True

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–µ–Ω—é ---
async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    if await database.is_user_banned(user_id):
        # ... (–∫–æ–¥ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö) ...
        return

    is_admin = await database.is_admin(user_id)
    await context.bot.send_message(
        user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboards.get_main_menu_keyboard(is_admin)
    )

# --- –õ–æ–≥–∏–∫–∞ —á–∞—Ç–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞) ---
async def find_partner(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    partner_id = await database.find_waiting_partner(user_id)

    if partner_id:
        await database.create_chat(user_id, partner_id)
        await start_chat_messaging(user_id, partner_id, context)
    else:
        await database.set_user_status(user_id, 'waiting')

async def start_chat_messaging(u1: int, u2: int, context: ContextTypes.DEFAULT_TYPE):
    markup = keyboards.get_chat_keyboard()
    msg = "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
    try:
        await context.bot.send_message(u1, msg, reply_markup=markup)
        await context.bot.send_message(u2, msg, reply_markup=markup)
    except Forbidden:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {u1} –∏–ª–∏ {u2}")
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ–º—É, –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –¥–ª—è –¥—Ä—É–≥–æ–≥–æ
        await end_chat(u1, context)

async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    partner_id = await database.delete_chat(user_id)
    
    await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(user_id, context)

    if partner_id:
        try:
            await context.bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=ReplyKeyboardRemove())
            await show_main_menu(partner_id, context)
        except Forbidden:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {partner_id} –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()
    data = query.data

    if data == "agree":
        await query.message.delete()
        await show_main_menu(user.id, context)
        return

    # --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
    if data == "admin_exit":
        await query.message.delete()
    elif data == "admin_ban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
        context.user_data['awaiting_ban_id'] = True
    elif data == "admin_unban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        context.user_data['awaiting_unban_id'] = True
    elif data == "admin_add_currency":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345 100):")
        context.user_data['awaiting_add_currency'] = True

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    await database.ensure_user(user.id, user.username)

    if await database.is_user_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π ---
    if context.user_data.get('awaiting_admin_password'):
        if text == ADMIN_PASSWORD:
            await database.set_admin(user.id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é.")
            await show_main_menu(user.id, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        del context.user_data['awaiting_admin_password']
        return

    if context.user_data.get('awaiting_ban_id'):
        try:
            target_id = int(text)
            await database.ban_user(target_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        del context.user_data['awaiting_ban_id']
        return

    if context.user_data.get('awaiting_unban_id'):
        try:
            target_id = int(text)
            await database.unban_user(target_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        del context.user_data['awaiting_unban_id']
        return
        
    if context.user_data.get('awaiting_add_currency'):
        try:
            target_id, amount = map(int, text.split())
            await database.update_balance(target_id, amount)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –≤–∞–ª—é—Ç—ã.")
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        del context.user_data['awaiting_add_currency']
        return

    # --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ª–æ–≥–∏–∫–∞ —á–∞—Ç–∞ ---
    user_status = await database.get_user_status(user.id)

    if user_status == 'in_chat':
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç" or text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat(user.id, context)
            if text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
                await find_partner(user.id, context)
        else:
            partner_id = await database.get_partner_id(user.id)
            if partner_id:
                try:
                    await context.bot.send_message(partner_id, text)
                except Forbidden:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    await end_chat(user.id, context)
    else: # –°—Ç–∞—Ç—É—Å 'idle' –∏–ª–∏ 'waiting'
        if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await find_partner(user.id, context)
        elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
            balance = await database.get_balance(user.id)
            await update.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")
        elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
            # ... (–∫–æ–¥ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤) ...
            pass
        elif text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and await database.is_admin(user.id):
            await admin_command(update, context)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await database.init_db()
    app = Application.builder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    async with app:
        await app.initialize()
        await app.updater.start_polling()
        await app.start()
        await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())

