# main.py
import asyncio
import logging
import os
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
import database
import keyboards

# ===== –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´ =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD")
ADMIN_IDS = set()

if not BOT_TOKEN or not ADMIN_PASSWORD:
    logging.error("BOT_TOKEN –∏–ª–∏ ADMIN_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
REWARD_FOR_REFERRAL = 10
COST_FOR_18PLUS = 50
COST_FOR_UNBAN = 100
COST_FOR_PHOTO = 50
MAX_WARNINGS = 3

# ===== –í–†–ï–ú–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï (–•–†–ê–ù–Ø–¢–°–Ø –í –ü–ê–ú–Ø–¢–ò) =====
# –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
waiting_users = []
active_chats = {}
show_name_requests = {}
active_tasks = {}
user_interests = {} # –í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

# –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å —ç–º–æ–¥–∑–∏
available_interests = {
    "–ú—É–∑—ã–∫–∞": "üéµ", "–ò–≥—Ä—ã": "üéÆ", "–ö–∏–Ω–æ": "üé¨",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": "‚úàÔ∏è", "–û–±—â–µ–Ω–∏–µ": "üí¨", "18+": "üîû"
}

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await database.ensure_user(user.id, user.username)

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user.id:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
                await database.ensure_user(referrer_id)
                # add_referral –≤–µ—Ä–Ω–µ—Ç True, –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –±—ã–ª –Ω–æ–≤—ã–º
                if await database.add_referral(referrer_id, user.id):
                    await database.update_balance(referrer_id, REWARD_FOR_REFERRAL)
                    await context.bot.send_message(
                        referrer_id,
                        f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REWARD_FOR_REFERRAL} –≤–∞–ª—é—Ç—ã."
                    )
        except (ValueError, IndexError):
            pass

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboards.get_agreement_keyboard()
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await show_admin_menu(update)
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        context.user_data["awaiting_admin_password"] = True

# ====== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ú–ï–ù–Æ ======

async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if await database.is_user_banned(user_id):
        await context.bot.send_message(
            user_id,
            "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.",
            reply_markup=keyboards.get_unban_keyboard(COST_FOR_UNBAN)
        )
    else:
        await context.bot.send_message(
            user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )

async def show_interests_menu(update: Update, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤."""
    if await database.is_user_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return
    if user_id in active_chats:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    user_interests[user_id] = []
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:",
        reply_markup=await keyboards.get_interests_keyboard(user_id, user_interests, available_interests)
    )

async def show_admin_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboards.get_admin_keyboard())

# ====== –õ–û–ì–ò–ö–ê –ß–ê–¢–ê ======

async def find_partner(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ò—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º."""
    user_interests_set = set(user_interests.get(user_id, []))
    
    for waiting_user_id in list(waiting_users):
        if waiting_user_id == user_id:
            continue
        waiting_user_interests_set = set(user_interests.get(waiting_user_id, []))
        if user_interests_set & waiting_user_interests_set:
            waiting_users.remove(waiting_user_id)
            await start_chat(context, user_id, waiting_user_id)
            return

    if user_id not in waiting_users:
        waiting_users.append(user_id)
        
    await context.bot.send_message(user_id, "‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏...")

async def start_chat(context: ContextTypes.DEFAULT_TYPE, u1: int, u2: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    active_chats[u1], active_chats[u2] = u2, u1
    
    markup = keyboards.get_chat_keyboard()
    msg = "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏."
    await context.bot.send_message(u1, msg, reply_markup=markup)
    await context.bot.send_message(u2, msg, reply_markup=markup)
    
    task = asyncio.create_task(chat_timer_task(context, u1, u2))
    pair_key = tuple(sorted((u1, u2)))
    active_tasks[pair_key] = task

async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)

        pair_key = tuple(sorted((user_id, partner_id)))
        if pair_key in show_name_requests:
            del show_name_requests[pair_key]
        
        task = active_tasks.pop(pair_key, None)
        if task:
            task.cancel()

        await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª.", reply_markup=ReplyKeyboardRemove())
        
        await show_main_menu(user_id, context)
        await show_main_menu(partner_id, context)

# ====== –õ–û–ì–ò–ö–ê –û–ë–ú–ï–ù–ê –ù–ò–ö–ê–ú–ò ======

async def chat_timer_task(context, u1, u2):
    """–¢–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏."""
    try:
        await asyncio.sleep(600)
        if u1 in active_chats and active_chats[u1] == u2:
            await ask_to_show_name(context, u1, u2)
    except asyncio.CancelledError:
        pass

async def ask_to_show_name(context: ContextTypes.DEFAULT_TYPE, u1, u2):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ö–æ—Ç—è—Ç –ª–∏ –æ–Ω–∏ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∏–∫–∏."""
    if u1 in active_chats and active_chats[u1] == u2:
        pair_key = tuple(sorted((u1, u2)))
        show_name_requests[pair_key] = {u1: None, u2: None}
        
        keyboard = keyboards.get_show_name_keyboard()
        msg = "‚è≥ –ü—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç. –•–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?"
        await context.bot.send_message(u1, msg, reply_markup=keyboard)
        await context.bot.send_message(u2, msg, reply_markup=keyboard)

async def handle_show_name_request(user_id: int, context: ContextTypes.DEFAULT_TYPE, agreement: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–æ–∫–∞–∑–µ –Ω–∏–∫–∞."""
    partner_id = active_chats.get(user_id)
    if not partner_id: return

    pair_key = tuple(sorted((user_id, partner_id)))
    if pair_key not in show_name_requests: return

    if not agreement:
        await context.bot.send_message(user_id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å. –ß–∞—Ç –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await context.bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫. –ß–∞—Ç –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await end_chat(user_id, context)
        return

    show_name_requests[pair_key][user_id] = agreement
    responses = show_name_requests[pair_key]
    
    if all(responses.values()): # –ï—Å–ª–∏ –æ–±–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏ "–¥–∞"
        u1, u2 = pair_key
        u1_info = await context.bot.get_chat(u1)
        u2_info = await context.bot.get_chat(u2)
        
        u1_name = f"@{u1_info.username}" if u1_info.username else u1_info.first_name
        u2_name = f"@{u2_info.username}" if u2_info.username else u2_info.first_name
        
        await context.bot.send_message(u1, f"ü•≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –ï–≥–æ –Ω–∏–∫: {u2_name}")
        await context.bot.send_message(u2, f"ü•≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –ï–≥–æ –Ω–∏–∫: {u1_name}")
        
        del show_name_requests[pair_key]
        task = active_tasks.pop(pair_key, None)
        if task: task.cancel()

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö (CALLBACK) ======

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö inline-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    user = query.from_user
    await database.ensure_user(user.id, user.username)
    await query.answer()
    data = query.data

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
    if data == "agree":
        await query.message.delete()
        await show_main_menu(user.id, context)

    elif data == "unban_request":
        balance = await database.get_balance(user.id)
        if balance >= COST_FOR_UNBAN:
            await database.update_balance(user.id, -COST_FOR_UNBAN)
            await database.unban_user(user.id)
            await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à –±–∞–ª–∞–Ω—Å: {await database.get_balance(user.id)}.")
            await show_main_menu(user.id, context)
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_UNBAN}.")

    # --- –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ---
    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        if interest_key in user_interests.get(user.id, []):
            user_interests[user.id].remove(interest_key)
        else:
            user_interests.setdefault(user.id, []).append(interest_key)
        await query.edit_message_reply_markup(
            reply_markup=await keyboards.get_interests_keyboard(user.id, user_interests, available_interests)
        )

    elif data == "interests_done":
        selected = user_interests.get(user.id, [])
        if not selected:
            await query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.",
                reply_markup=await keyboards.get_interests_keyboard(user.id, user_interests, available_interests))
            return
        
        if "18+" in selected and not await database.has_unlocked_18plus(user.id):
            balance = await database.get_balance(user.id)
            if balance >= COST_FOR_18PLUS:
                await database.update_balance(user.id, -COST_FOR_18PLUS)
                await database.unlock_18plus(user.id)
                await query.edit_message_text(f"‚úÖ –ß–∞—Ç 18+ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ {COST_FOR_18PLUS} –≤–∞–ª—é—Ç—ã! –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            else:
                await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è 18+ (–Ω—É–∂–Ω–æ {COST_FOR_18PLUS}).")
                user_interests[user.id].remove("18+")
                return
        else:
            await query.edit_message_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã. –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        
        await find_partner(context, user.id)

    # --- –û–±–º–µ–Ω –Ω–∏–∫–∞–º–∏ ---
    elif data == "show_name_yes":
        await query.message.edit_reply_markup(reply_markup=None)
        await query.message.reply_text("‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        await handle_show_name_request(user.id, context, True)
    
    elif data == "show_name_no":
        await query.message.edit_reply_markup(reply_markup=None)
        await handle_show_name_request(user.id, context, False)

    # --- –ñ–∞–ª–æ–±—ã ---
    elif data.startswith("report_reason_"):
        # –õ–æ–≥–∏–∫–∞ –∂–∞–ª–æ–± (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        pass
    
    # --- –ê–¥–º–∏–Ω–∫–∞ ---
    elif data == "admin_ban":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –±–∞–Ω–∞:")
        context.user_data["awaiting_ban_id"] = True
    # ... –∏ –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ======

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user = update.effective_user
    await database.ensure_user(user.id, user.username)
    text = update.message.text

    if await database.is_user_banned(user.id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
        return
        
    # --- –õ–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω-–≤–≤–æ–¥–∞ ---
    if context.user_data.get("awaiting_ban_id"):
        try:
            target_id = int(text)
            await database.ensure_user(target_id)
            await database.ban_user(target_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
            await context.bot.send_message(target_id, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        context.user_data.pop("awaiting_ban_id", None)
        return

    # --- –ö–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é ---
    if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        await show_interests_menu(update, user.id)
    elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
        balance = await database.get_balance(user.id)
        await update.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")
    elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        count = await database.get_referral_count(user.id)
        link = f"https://t.me/{context.bot.username}?start={user.id}"
        await update.message.reply_text(f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {count}")

    # --- –õ–æ–≥–∏–∫–∞ –≤ —á–∞—Ç–µ ---
    elif user.id in active_chats:
        partner_id = active_chats[user.id]
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await end_chat(user.id, context)
        elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat(user.id, context)
            await show_interests_menu(update, user.id)
        elif text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:", reply_markup=keyboards.get_report_reasons_keyboard())
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if re.search(r'@?\s*[A-Za-z0-9_]{5,}', text):
                warnings = await database.increment_warnings(user.id)
                if warnings >= MAX_WARNINGS:
                    await database.ban_user(user.id)
                    await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞–∑–≥–ª–∞—Å–∏—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                    await context.bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
                    await end_chat(user.id, context)
                else:
                    await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings}/{MAX_WARNINGS}: –ù–µ–ª—å–∑—è —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
            else:
                await context.bot.send_message(partner_id, text)

# ====== –ó–ê–ü–£–°–ö –ë–û–¢–ê ======
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        await database.init_db()
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –û—à–∏–±–∫–∞: {e}")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    # app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.VOICE, media_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

