# handlers.py
import asyncio
import logging
import re

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import database as db
import keyboards as kb
from config import (
    ADMIN_PASSWORD, ADMIN_IDS, REWARD_FOR_REFERRAL, COST_FOR_18PLUS,
    COST_FOR_UNBAN, COST_FOR_PHOTO, MAX_WARNINGS
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user = await db.get_or_create_user(user_id)
    if user['is_banned']:
        await context.bot.send_message(
            user_id,
            "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –≤—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.",
            reply_markup=kb.get_ban_keyboard()
        )
    else:
        await context.bot.send_message(
            user_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.get_main_menu_keyboard()
        )

async def end_chat_session(user_id: int, context: ContextTypes.DEFAULT_TYPE, message: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞."""
    partner_id = await db.end_chat(user_id)
    
    pair_key = tuple(sorted((user_id, partner_id)))
    context.bot_data.pop(pair_key, None) # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—Ä–æ—Å—ã

    if partner_id:
        await context.bot.send_message(partner_id, f"‚ùå {message}", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(partner_id, context)
    
    await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(user_id, context)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    user = await db.get_or_create_user(user_id)

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if context.args and not user['invited_by']:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id:
                await db.add_referral(user_id, referrer_id, REWARD_FOR_REFERRAL)
                await context.bot.send_message(
                    referrer_id,
                    f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REWARD_FOR_REFERRAL} –≤–∞–ª—é—Ç—ã."
                )
        except (ValueError, IndexError):
            logger.warning(f"Invalid referrer ID in start command: {context.args}")
            
    # –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    await db.set_agreement(user_id, False)
    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç!\n\n"
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã.\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.get_admin_keyboard())
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        context.user_data["awaiting_admin_password"] = True


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (Callback) ---

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö inline-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    user = await db.get_or_create_user(user_id)

    if data == "agree":
        await db.set_agreement(user_id, True)
        await query.message.delete()
        await show_main_menu(user_id, context)

    elif data == "unban_request":
        if user['balance'] >= COST_FOR_UNBAN:
            await db.update_balance(user_id, -COST_FOR_UNBAN)
            await db.set_ban_status(user_id, False)
            new_balance = user['balance'] - COST_FOR_UNBAN
            await query.edit_message_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {COST_FOR_UNBAN} –≤–∞–ª—é—Ç—ã. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}. –°—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω.")
            await show_main_menu(user_id, context)
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_UNBAN}. –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}.")

    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        current_interests = context.user_data.get("interests", [])
        if interest_key in current_interests:
            current_interests.remove(interest_key)
        else:
            current_interests.append(interest_key)
        context.user_data["interests"] = current_interests
        await query.edit_message_reply_markup(reply_markup=await kb.get_interests_keyboard(current_interests))

    elif data == "interests_done":
        selected_interests = context.user_data.get("interests", [])
        if not selected_interests:
            await query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.", reply_markup=await kb.get_interests_keyboard())
            return

        if "18+" in selected_interests and not user['unlocked_18plus']:
            if user['balance'] >= COST_FOR_18PLUS:
                await db.update_balance(user_id, -COST_FOR_18PLUS)
                await db.unlock_18plus(user_id)
            else:
                await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞ 18+ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_18PLUS}). –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}.")
                return

        await db.update_user_interests(user_id, selected_interests)
        await db.update_user_status(user_id, 'waiting')
        await query.edit_message_text(f"‚úÖ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(selected_interests)}. –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

        partner_id = await db.find_partner(user_id, selected_interests)
        if partner_id:
            await db.create_chat(user_id, partner_id)
            await context.bot.send_message(user_id, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!", reply_markup=kb.get_chat_keyboard())
            await context.bot.send_message(partner_id, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!", reply_markup=kb.get_chat_keyboard())
        else:
            await context.bot.send_message(user_id, "‚è≥ –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, –º—ã —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ—Ç—Å—è.")

    # ... (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫, —Ç–∞–∫–∏—Ö –∫–∞–∫ admin, report –∏ —Ç.–¥., –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ) ...


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    text = update.message.text
    user = await db.get_or_create_user(user_id)

    # --- –ê–¥–º–∏–Ω-–ª–æ–≥–∏–∫–∞ ---
    if context.user_data.get("awaiting_admin_password"):
        if text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(user_id)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π!", reply_markup=ReplyKeyboardRemove())
            await admin_command(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data.pop("awaiting_admin_password", None)
        return
    # ... (–¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∏–Ω–ø—É—Ç—ã: ban_id, add_currency –∏ —Ç.–¥.) ...
    
    if user['is_banned']:
        await show_main_menu(user_id, context)
        return

    # --- –õ–æ–≥–∏–∫–∞ –≤ —á–∞—Ç–µ ---
    if user['status'] == 'in_chat':
        partner_id = user['partner_id']
        partner = await db.get_or_create_user(partner_id)

        if partner['is_banned']:
            await end_chat_session(user_id, context, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
            return
            
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await end_chat_session(user_id, context, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
        elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat_session(user_id, context, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.")
            # –°—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:", reply_markup=await kb.get_interests_keyboard())
        else:
            # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await context.bot.send_message(partner_id, text)

    # --- –õ–æ–≥–∏–∫–∞ –≤ –º–µ–Ω—é ---
    elif user['status'] == 'idle' or user['status'] == 'waiting':
        if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            if user['status'] == 'in_chat':
                await update.message.reply_text("‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ.")
                return
            context.user_data["interests"] = []
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=await kb.get_interests_keyboard())
        
        elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
            await update.message.reply_text(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']}")
        
        elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
            link = f"https://t.me/{context.bot.username}?start={user_id}"
            await update.message.reply_text(f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['referrals_count']}")
        
        else:
            await show_main_menu(user_id, context)


async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∏ —Ç.–¥.)."""
    user_id = update.effective_user.id
    user = await db.get_or_create_user(user_id)

    if user['is_banned'] or user['status'] != 'in_chat':
        return

    partner_id = user['partner_id']
    
    if update.message.photo:
        if user['balance'] >= COST_FOR_PHOTO:
            await db.update_balance(user_id, -COST_FOR_PHOTO)
            await context.bot.send_photo(partner_id, update.message.photo[-1].file_id)
            await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {COST_FOR_PHOTO} –≤–∞–ª—é—Ç—ã.")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ. –°—Ç–æ–∏–º–æ—Å—Ç—å: {COST_FOR_PHOTO}. –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}.")
    elif update.message.video:
        await context.bot.send_video(partner_id, update.message.video.file_id)
    elif update.message.voice:
        await context.bot.send_voice(partner_id, update.message.voice.file_id)
