import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

import database as db
import keyboards as kb
from config import (
    ADMIN_PASSWORD, ADMIN_IDS, REWARD_FOR_REFERRAL, COST_FOR_18PLUS,
    COST_FOR_UNBAN, COST_FOR_PHOTO, CHAT_TIMER_SECONDS
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE, as_admin=False, message_id=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ."""
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    keyboard = kb.get_main_menu_keyboard()
    if as_admin:
        text = "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        keyboard = kb.get_admin_reply_keyboard()

    # –ï—Å–ª–∏ –µ—Å—Ç—å message_id, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò–Ω–∞—á–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    if message_id:
        try:
            await context.bot.edit_message_text(chat_id=user_id, message_id=message_id, text=text, reply_markup=None)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Ç–∞–∫ –∫–∞–∫ –µ–µ –Ω–µ–ª—å–∑—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º—É
            await context.bot.send_message(chat_id=user_id, text="‚Äã", reply_markup=keyboard, parse_mode='HTML') # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)
    else:
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)


async def end_chat_session(user_id: int, context: ContextTypes.DEFAULT_TYPE, message_for_partner: str):
    # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    chat_id_str = f"chat_timer_{user_id}"
    jobs = context.job_queue.get_jobs_by_name(chat_id_str)
    for job in jobs:
        job.schedule_removal()
        
    partner_id = await db.end_chat(user_id)
    if partner_id:
        is_partner_admin = partner_id in ADMIN_IDS
        await context.bot.send_message(partner_id, message_for_partner, reply_markup=kb.remove_keyboard())
        await show_main_menu(partner_id, context, as_admin=is_partner_admin)
    
    is_admin = user_id in ADMIN_IDS
    await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=kb.remove_keyboard())
    await show_main_menu(user_id, context, as_admin=is_admin)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏."""
    user_id = update.effective_user.id
    user = await db.get_or_create_user(user_id)
    if context.args and not user['invited_by']:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id:
                await db.add_referral(user_id, referrer_id, REWARD_FOR_REFERRAL)
                await context.bot.send_message(referrer_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ù–∞–≥—Ä–∞–¥–∞: {REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç.")
        except (ValueError, IndexError):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {context.args}")

    await db.set_agreement(user_id, False)
    rules_text = (
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:</b>\n\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.\n"
        "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–º—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–≥—Ä–æ–∑—ã –∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–∏.\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–∏–∫–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Ç.–¥.)."
    )
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞", callback_data="agree")]]
    await update.message.reply_text(rules_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# --- –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∏ –æ–±–º–µ–Ω–∞ –Ω–∏–∫–∞–º–∏ ---
async def ask_for_exchange(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    job_data = context.job.data
    u1, u2 = job_data['user1'], job_data['user2']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –≤—Å–µ –µ—â–µ –≤ —á–∞—Ç–µ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
    user1_data = await db.get_or_create_user(u1)
    if user1_data['status'] != 'in_chat' or user1_data['partner_id'] != u2:
        return # –ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω

    context.bot_data[f"exchange_{u1}"] = None # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞
    context.bot_data[f"exchange_{u2}"] = None

    await context.bot.send_message(u1, "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –•–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏ (@username) —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º?", reply_markup=kb.get_name_exchange_keyboard())
    await context.bot.send_message(u2, "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –•–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏ (@username) —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º?", reply_markup=kb.get_name_exchange_keyboard())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (Callback) ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    if data == "back_to_main":
        await query.message.delete()
        await show_main_menu(user_id, context, as_admin=(user_id in ADMIN_IDS))
        return

    if data == "earn_coins":
        text = (
            f"üîó **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã!**\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ **{REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç**.\n\n"
            f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`https://t.me/{context.bot.username}?start={user_id}`"
        )
        await query.message.edit_text(text, reply_markup=kb.get_back_keyboard(), parse_mode='Markdown')
        return

    if data.startswith("exchange_"):
        answer = data.split('_')[1] # yes –∏–ª–∏ no
        user_data = await db.get_or_create_user(user_id)
        partner_id = user_data.get('partner_id')

        if not partner_id:
            await query.message.edit_text("‚ùå –ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        context.bot_data[f"exchange_{user_id}"] = answer
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: '{answer}'. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

        partner_answer = context.bot_data.get(f"exchange_{partner_id}")
        if partner_answer: # –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª
            if answer == 'yes' and partner_answer == 'yes':
                user_info = await context.bot.get_chat(user_id)
                partner_info = await context.bot.get_chat(partner_id)
                user_username = f"@{user_info.username}" if user_info.username else "—Å–∫—Ä—ã—Ç"
                partner_username = f"@{partner_info.username}" if partner_info.username else "—Å–∫—Ä—ã—Ç"

                await context.bot.send_message(user_id, f"ü•≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –ï–≥–æ –Ω–∏–∫: {partner_username}")
                await context.bot.send_message(partner_id, f"ü•≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –ï–≥–æ –Ω–∏–∫: {user_username}")
            else:
                await context.bot.send_message(user_id, "‚ùå –û–¥–∏–Ω –∏–∑ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –û–±–º–µ–Ω –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
                await context.bot.send_message(partner_id, "‚ùå –û–¥–∏–Ω –∏–∑ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –û–±–º–µ–Ω –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ–±–æ–∏—Ö
            await end_chat_session(user_id, context, "")
        return

    # ... (–∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    if data == "agree":
        await db.set_agreement(user_id, True)
        await query.message.delete()
        await show_main_menu(user_id, context, as_admin=(user_id in ADMIN_IDS))

    elif data.startswith("interest_"):
        # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    elif data == "interests_done":
        selected_interests = context.user_data.get("interests", [])
        if not selected_interests:
            await query.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.", show_alert=True)
            return

        user = await db.get_or_create_user(user_id)
        # ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 18+ –∏ –±–∞–ª–∞–Ω—Å) ...

        await db.update_user_interests(user_id, selected_interests)
        await db.update_user_status(user_id, 'waiting')
        await query.message.edit_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(selected_interests)}. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")

        partner_id = await db.find_partner(user_id, selected_interests)
        if partner_id:
            await db.create_chat(user_id, partner_id)
            chat_message = f"üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å {CHAT_TIMER_SECONDS} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏."
            await context.bot.send_message(user_id, chat_message, reply_markup=kb.get_chat_keyboard())
            await context.bot.send_message(partner_id, chat_message, reply_markup=kb.get_chat_keyboard())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            context.job_queue.run_once(
                ask_for_exchange,
                CHAT_TIMER_SECONDS,
                data={'user1': user_id, 'user2': partner_id},
                name=f"chat_timer_{user_id}_{partner_id}"
            )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # ... (–∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    user = await db.get_or_create_user(user_id)
    is_admin = user_id in ADMIN_IDS

    # ... (–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    if user['is_banned']:
        await show_main_menu(user_id, context)
        return

    if text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and is_admin:
        await admin_command(update, context)
        return
    # –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —É–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞

    if user['status'] == 'in_chat':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∏–∫–∞
        if re.search(r'@[A-Za-z0-9_]{4,}', text):
            await db.set_ban_status(user_id, True)
            await update.message.reply_text("‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –ø–æ–ø—ã—Ç–∫—É —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", reply_markup=kb.remove_keyboard())
            await end_chat_session(user_id, context, "‚ö†Ô∏è –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        await context.bot.send_message(user['partner_id'], text)
    else:
        if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
            await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç.", reply_markup=kb.get_balance_keyboard())
        elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
            text = (
                f"üîó **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã!**\n\n"
                f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ **{REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç**.\n\n"
                f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`https://t.me/{context.bot.username}?start={user_id}`"
            )
            await update.message.reply_text(text, reply_markup=kb.get_back_keyboard(), parse_mode='Markdown')
        else:
            await show_main_menu(user_id, context, as_admin=is_admin)

# ... (media_handler –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
