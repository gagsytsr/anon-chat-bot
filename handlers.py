import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

import database as db
import keyboards as kb
from config import (
    ADMIN_PASSWORD, ADMIN_IDS, REWARD_FOR_REFERRAL, COST_FOR_18PLUS,
    COST_FOR_UNBAN, COST_FOR_PHOTO, CHAT_TIMER_SECONDS, MAX_WARNINGS
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE, as_admin=False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤ —Ç–æ–º —á–∏—Å–ª–µ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö."""
    user = await db.get_or_create_user(user_id)
    
    if user['is_banned']:
        text = (
            f"‚ùå **–î–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!**\n\n"
            f"–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Ç.–∫. —É –≤–∞—Å {user['warnings']} –∏–∑ {MAX_WARNINGS} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. "
            f"–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Å–µ–±—è, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫."
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å—É
        await context.bot.send_message(user_id, text, reply_markup=kb.get_ban_keyboard(), parse_mode='Markdown')
        await context.bot.send_message(user_id, "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é.", reply_markup=kb.get_main_menu_keyboard())
        return

    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    keyboard = kb.get_main_menu_keyboard()
    if as_admin:
        text = "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        keyboard = kb.get_admin_reply_keyboard()
    
    await context.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard)


async def end_chat_session(user_id: int, context: ContextTypes.DEFAULT_TYPE, message_for_partner: str):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç, —É–¥–∞–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –∏ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞."""
    user = await db.get_or_create_user(user_id)
    partner_id = user['partner_id']
    
    if partner_id:
        pair_key = tuple(sorted((user_id, partner_id)))
        job_name = f"chat_timer_{pair_key[0]}_{pair_key[1]}"
        jobs = context.job_queue.get_jobs_by_name(job_name)
        for job in jobs:
            job.schedule_removal()
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±–º–µ–Ω
        context.bot_data.pop(f"history_{pair_key}", None)
        context.bot_data.pop(f"exchange_{pair_key}", None)

    actual_partner_id = await db.end_chat(user_id)
    
    if actual_partner_id:
        if message_for_partner:
            await context.bot.send_message(actual_partner_id, message_for_partner, reply_markup=kb.remove_keyboard())
        is_partner_admin = actual_partner_id in ADMIN_IDS
        await show_main_menu(actual_partner_id, context, as_admin=is_partner_admin)
    
    is_admin = user_id in ADMIN_IDS
    await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=kb.remove_keyboard())
    await show_main_menu(user_id, context, as_admin=is_admin)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await db.get_or_create_user(user_id)
    if context.args and not user['invited_by']:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id:
                await db.add_referral(user_id, referrer_id, REWARD_FOR_REFERRAL)
                await context.bot.send_message(referrer_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ù–∞–≥—Ä–∞–¥–∞: {REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç.")
        except Exception:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {context.args}")

    await db.set_agreement(user_id, False)
    rules_text = (
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:</b>\n\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ.\n"
        "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–º—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–≥—Ä–æ–∑—ã –∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–∏.\n"
        "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–∏–∫–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Ç.–¥.)."
    )
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –ø—Ä–∏–Ω–∏–º–∞—é –ø—Ä–∞–≤–∏–ª–∞", callback_data="agree")]]
    await update.message.reply_text(rules_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.get_admin_keyboard())
    else:
        context.user_data["awaiting_admin_password"] = True
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")


# --- –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞ ---
async def ask_for_exchange(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    u1, u2 = job_data['user1'], job_data['user2']

    user1_data = await db.get_or_create_user(u1)
    if user1_data['status'] != 'in_chat' or user1_data['partner_id'] != u2:
        return

    pair_key = tuple(sorted((u1, u2)))
    context.bot_data[f"exchange_{pair_key}"] = {u1: None, u2: None}

    await context.bot.send_message(u1, "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –•–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º?", reply_markup=kb.get_name_exchange_keyboard())
    await context.bot.send_message(u2, "–í—Ä–µ–º—è –≤—ã—à–ª–æ! –•–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º?", reply_markup=kb.get_name_exchange_keyboard())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (Callback) ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()
    
    if data.startswith("report_"):
        reason = data.split('_')[1]
        if reason == 'cancel':
            await query.message.delete()
            return

        user_data = await db.get_or_create_user(user_id)
        partner_id = user_data.get('partner_id')
        if not partner_id:
            await query.edit_message_text("‚ùå –ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        pair_key = tuple(sorted((user_id, partner_id)))
        history = context.bot_data.get(f"history_{pair_key}", "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        report_text = (
            f"‚ùóÔ∏è **–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞** ‚ùóÔ∏è\n\n"
            f"üë§ **–û—Ç:** `{user_id}`\n"
            f"üéØ **–ù–∞:** `{partner_id}`\n"
            f"üìú **–ü—Ä–∏—á–∏–Ω–∞:** {reason.capitalize()}\n\n"
            f"üìù **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:**\n{history}"
        )

        if not ADMIN_IDS:
             logger.warning("–ñ–∞–ª–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –µ–µ –ø–æ–ª—É—á–µ–Ω–∏—è!")
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(admin_id, report_text, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        await query.message.edit_text("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
        return

    if data == "unban_request":
        user = await db.get_or_create_user(user_id)
        if user['balance'] >= COST_FOR_UNBAN:
            await db.update_balance(user_id, -COST_FOR_UNBAN)
            await db.set_ban_status(user_id, False)
            await query.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {COST_FOR_UNBAN} –º–æ–Ω–µ—Ç. –í–∞—à–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")
            await show_main_menu(user_id, context, as_admin=(user_id in ADMIN_IDS))
        else:
            await query.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ {COST_FOR_UNBAN}.", show_alert=True)
        return

    if data == "back_to_main":
        await query.message.delete()
        await show_main_menu(user_id, context, as_admin=(user_id in ADMIN_IDS))
        return

    if data == "earn_coins":
        text = (
            f"üîó **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã!**\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ **{REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç**.\n\n"
            f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`https://t.me/{context.bot.username}?start={user_id}`"
        )
        await query.message.edit_text(text, reply_markup=kb.get_back_keyboard(), parse_mode='Markdown')
        return

    if data.startswith("exchange_"):
        answer = data.split('_')[1]
        user_data = await db.get_or_create_user(user_id)
        partner_id = user_data.get('partner_id')

        if not partner_id:
            await query.message.edit_text("‚ùå –ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        pair_key = tuple(sorted((user_id, partner_id)))
        exchange_data = context.bot_data.get(f"exchange_{pair_key}")
        if exchange_data is None:
            return

        exchange_data[user_id] = answer
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: '{answer}'. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

        if all(response is not None for response in exchange_data.values()):
            u1, u2 = pair_key
            if exchange_data[u1] == 'yes' and exchange_data[u2] == 'yes':
                user1_info = await context.bot.get_chat(u1)
                user2_info = await context.bot.get_chat(u2)
                
                user1_name = f"@{user1_info.username}" if user1_info.username else user1_info.first_name
                user2_name = f"@{user2_info.username}" if user2_info.username else user2_info.first_name

                await context.bot.send_message(u1, f"ü•≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –ï–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç: {user2_name}")
                await context.bot.send_message(u2, f"ü•≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –ï–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç: {user1_name}")
            else:
                await context.bot.send_message(u1, "‚ùå –û–¥–∏–Ω –∏–∑ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –û–±–º–µ–Ω –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è.")
                await context.bot.send_message(u2, "‚ùå –û–¥–∏–Ω –∏–∑ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –æ—Ç–∫–∞–∑–∞–ª—Å—è. –û–±–º–µ–Ω –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è.")
            
            await end_chat_session(user_id, context, "")
        return

    if data == "admin_stats":
        stats = await db.get_admin_stats()
        await query.message.edit_text(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**\n\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats']}\n"
            f"‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {stats['banned_users']}\n"
            f"üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}\n"
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']}",
            parse_mode='Markdown',
            reply_markup=kb.get_admin_keyboard()
        )
        return

    if data == "admin_ban":
        context.user_data['awaiting_ban_id'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
        return
        
    if data == "admin_unban":
        context.user_data['awaiting_unban_id'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        return

    if data == "admin_add_currency":
        context.user_data['awaiting_add_currency'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345 100):")
        return

    if data == "admin_remove_currency":
        context.user_data['awaiting_remove_currency'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return

    if data == "admin_stop_all":
        active_users = await db.get_all_active_users()
        if not active_users:
            await query.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=kb.get_admin_keyboard())
            return

        uids_in_chat = {record['user_id'] for record in active_users}
        for uid in uids_in_chat:
            user = await db.get_or_create_user(uid)
            if user['status'] == 'in_chat':
                await end_chat_session(uid, context, "–ß–∞—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        
        await query.message.edit_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —á–∞—Ç–æ–≤: {len(uids_in_chat) // 2}.", reply_markup=kb.get_admin_keyboard())
        return

    if data == "agree":
        await db.set_agreement(user_id, True)
        await query.message.delete()
        await show_main_menu(user_id, context, as_admin=(user_id in ADMIN_IDS))

    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        current_interests = context.user_data.get("interests", [])
        if interest_key in current_interests:
            current_interests.remove(interest_key)
        else:
            current_interests.append(interest_key)
        context.user_data["interests"] = current_interests
        await query.edit_message_reply_markup(reply_markup=await kb.get_interests_keyboard(current_interests))

    elif data == "interests_done":
        selected_interests = context.user_data.get("interests", [])
        if not selected_interests:
            await query.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.", show_alert=True)
            return

        user = await db.get_or_create_user(user_id)
        if user['is_banned']:
            await query.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", show_alert=True)
            await query.message.delete()
            await show_main_menu(user_id, context, as_admin=(user_id in ADMIN_IDS))
            return

        if "18+" in selected_interests and not user['unlocked_18plus']:
            if user['balance'] >= COST_FOR_18PLUS:
                await db.update_balance(user_id, -COST_FOR_18PLUS)
                await db.unlock_18plus(user_id)
            else:
                await query.message.edit_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ 18+ (–Ω—É–∂–Ω–æ {COST_FOR_18PLUS}). –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}.")
                return

        await db.update_user_interests(user_id, selected_interests)
        await db.update_user_status(user_id, 'waiting')
        await query.message.edit_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(selected_interests)}. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")

        partner_id = await db.find_partner(user_id, selected_interests)
        if partner_id:
            await db.create_chat(user_id, partner_id)
            chat_message = f"üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å {CHAT_TIMER_SECONDS} —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–±–º–µ–Ω—è—Ç—å—Å—è –Ω–∏–∫–∞–º–∏."
            await context.bot.send_message(user_id, chat_message, reply_markup=kb.get_chat_keyboard())
            await context.bot.send_message(partner_id, chat_message, reply_markup=kb.get_chat_keyboard())
            
            pair_key = tuple(sorted((user_id, partner_id)))
            context.job_queue.run_once(
                ask_for_exchange,
                CHAT_TIMER_SECONDS,
                data={'user1': user_id, 'user2': partner_id},
                name=f"chat_timer_{pair_key[0]}_{pair_key[1]}"
            )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
        
    user_id = update.effective_user.id
    text = update.message.text

    if user_id in ADMIN_IDS:
        if context.user_data.get('awaiting_ban_id'):
            try:
                target_id = int(text)
                await db.set_ban_status(target_id, True)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
                await context.bot.send_message(target_id, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –æ—à–∏–±–∫–∞.")
            context.user_data.pop('awaiting_ban_id')
            await admin_command(update, context)
            return
            
        if context.user_data.get('awaiting_unban_id'):
            try:
                target_id = int(text)
                await db.set_ban_status(target_id, False)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
                await context.bot.send_message(target_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –æ—à–∏–±–∫–∞.")
            context.user_data.pop('awaiting_unban_id')
            await admin_command(update, context)
            return
            
        if context.user_data.get('awaiting_add_currency'):
            try:
                target_id, amount = map(int, text.split())
                new_balance = await db.update_balance(target_id, amount)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}.")
                await context.bot.send_message(target_id, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount} –º–æ–Ω–µ—Ç.")
            except Exception:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É.")
            context.user_data.pop('awaiting_add_currency')
            await admin_command(update, context)
            return
            
        if context.user_data.get('awaiting_remove_currency'):
            try:
                target_id, amount = map(int, text.split())
                new_balance = await db.update_balance(target_id, -amount)
                await update.message.reply_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–ø–∏—Å–∞–Ω–æ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}.")
                await context.bot.send_message(target_id, f"üí∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª —É –≤–∞—Å {amount} –º–æ–Ω–µ—Ç.")
            except Exception:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É.")
            context.user_data.pop('awaiting_remove_currency')
            await admin_command(update, context)
            return

    user = await db.get_or_create_user(user_id)
    is_admin = user_id in ADMIN_IDS

    if context.user_data.get("awaiting_admin_password"):
        if text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(user_id)
            await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.", reply_markup=kb.get_admin_reply_keyboard())
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data.pop("awaiting_admin_password", None)
        return

    if user['is_banned']:
        if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await show_main_menu(user_id, context)
        elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
            await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç.", reply_markup=kb.get_balance_keyboard())
        elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
            text_ref = (
                f"üîó **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã!**\n\n"
                f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ **{REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç**.\n\n"
                f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`https://t.me/{context.bot.username}?start={user_id}`"
            )
            await update.message.reply_text(text_ref, reply_markup=kb.get_back_keyboard(), parse_mode='Markdown')
        elif is_admin and text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
             await admin_command(update, context)
        else:
            await show_main_menu(user_id, context)
        return

    if text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and is_admin:
        await admin_command(update, context)
        return

    if user['status'] == 'in_chat':
        partner_id = user['partner_id']
        pair_key = tuple(sorted((user_id, partner_id)))

        if f"history_{pair_key}" not in context.bot_data:
            context.bot_data[f"history_{pair_key}"] = ""
        context.bot_data[f"history_{pair_key}"] += f"[{user_id}]: {text}\n"

        if text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:", reply_markup=kb.get_report_keyboard())
            return
        
        forbidden_keywords = ['@', '–Ω–∏–∫', '–Ω–∏–∫–Ω–µ–π–º', 'username', '—é–∑–µ—Ä–Ω–µ–π–º']
        if any(keyword in text.lower() for keyword in forbidden_keywords):
            new_warnings = await db.add_warning(user_id)
            
            await context.bot.send_message(user_id, f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {new_warnings}/{MAX_WARNINGS}**: –ù–µ–ª—å–∑—è —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", parse_mode='Markdown')

            if new_warnings >= MAX_WARNINGS:
                await db.set_ban_status(user_id, True)
                await context.bot.send_message(user_id, "‚ùå **–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.**", reply_markup=kb.remove_keyboard(), parse_mode='Markdown')
                await end_chat_session(user_id, context, "‚ö†Ô∏è –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        await context.bot.send_message(partner_id, text)
    else:
        if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            context.user_data["interests"] = []
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=await kb.get_interests_keyboard())
        elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
            await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç.", reply_markup=kb.get_balance_keyboard())
        elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
            text_ref = (
                f"üîó **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã!**\n\n"
                f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ **{REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç**.\n\n"
                f"–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`https://t.me/{context.bot.username}?start={user_id}`"
            )
            await update.message.reply_text(text_ref, reply_markup=kb.get_back_keyboard(), parse_mode='Markdown')
        else:
            await show_main_menu(user_id, context, as_admin=is_admin)


async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await db.get_or_create_user(user_id)

    if user['is_banned']:
        return

    if user['status'] == 'in_chat':
        if user['balance'] >= COST_FOR_PHOTO:
            new_balance = await db.update_balance(user_id, -COST_FOR_PHOTO)
            caption = f"‚úÖ –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∏—Å–∞–Ω–æ {COST_FOR_PHOTO} –º–æ–Ω–µ—Ç. –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance}."
            if update.message.photo:
                await context.bot.send_photo(user['partner_id'], update.message.photo[-1].file_id)
            elif update.message.video:
                await context.bot.send_video(user['partner_id'], update.message.video.file_id)
            await update.message.reply_text(caption)
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ (–Ω—É–∂–Ω–æ {COST_FOR_PHOTO}).")

