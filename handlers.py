import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

import database as db
import keyboards as kb
from config import (
    ADMIN_PASSWORD, ADMIN_IDS, REWARD_FOR_REFERRAL, COST_FOR_18PLUS,
    COST_FOR_UNBAN, COST_FOR_PHOTO
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def show_main_menu(user_id: int, context: ContextTypes.DEFAULT_TYPE, as_admin=False):
    user = await db.get_or_create_user(user_id)
    if user['is_banned']:
        await context.bot.send_message(user_id, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=kb.get_ban_keyboard())
    elif as_admin:
        await context.bot.send_message(user_id, "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=kb.get_admin_reply_keyboard())
    else:
        await context.bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.get_main_menu_keyboard())

async def end_chat_session(user_id: int, context: ContextTypes.DEFAULT_TYPE, message_for_partner: str):
    partner_id = await db.end_chat(user_id)
    if partner_id:
        is_partner_admin = partner_id in ADMIN_IDS
        await context.bot.send_message(partner_id, message_for_partner, reply_markup=kb.remove_keyboard())
        await show_main_menu(partner_id, context, as_admin=is_partner_admin)
    
    is_admin = user_id in ADMIN_IDS
    await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=kb.remove_keyboard())
    await show_main_menu(user_id, context, as_admin=is_admin)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await db.get_or_create_user(user_id)
    if context.args and not user['invited_by']:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user_id:
                await db.add_referral(user_id, referrer_id, REWARD_FOR_REFERRAL)
                await context.bot.send_message(referrer_id, f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ù–∞–≥—Ä–∞–¥–∞: {REWARD_FOR_REFERRAL} –º–æ–Ω–µ—Ç.")
        except (ValueError, IndexError):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {context.args}")

    await db.set_agreement(user_id, False)
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏", callback_data="agree")]]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.get_admin_keyboard())
    else:
        context.user_data["awaiting_admin_password"] = True
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (Callback) ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    # --- –ê–î–ú–ò–ù-–ö–ù–û–ü–ö–ò ---
    if data == "admin_stats":
        stats = await db.get_admin_stats()
        await query.message.edit_text(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**\n\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['active_chats']}\n"
            f"‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {stats['banned_users']}\n"
            f"üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['total_referrals']}\n"
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']}",
            parse_mode='Markdown'
        )
        await query.message.reply_markup(kb.get_admin_keyboard())
        return

    if data == "admin_ban":
        context.user_data['awaiting_ban_id'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
        return
        
    if data == "admin_unban":
        context.user_data['awaiting_unban_id'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        return

    if data == "admin_add_currency":
        context.user_data['awaiting_add_currency'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345 100):")
        return

    if data == "admin_remove_currency":
        context.user_data['awaiting_remove_currency'] = True
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return

    if data == "admin_stop_all":
        active_users = await db.get_all_active_users()
        if not active_users:
            await query.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç.")
            await query.message.reply_markup(kb.get_admin_keyboard())
            return

        stopped_count = 0
        for record in active_users:
            uid = record['user_id']
            user = await db.get_or_create_user(uid)
            if user['status'] == 'in_chat':
                await end_chat_session(uid, context, "–ß–∞—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                stopped_count += 1
        
        await query.message.edit_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —á–∞—Ç–æ–≤: {stopped_count // 2}.")
        await query.message.reply_markup(kb.get_admin_keyboard())
        return

    # --- –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–ù–û–ü–ö–ò ---
    if data == "agree":
        await db.set_agreement(user_id, True)
        await query.message.delete()
        await show_main_menu(user_id, context)

    elif data.startswith("interest_"):
        interest_key = data.replace("interest_", "")
        current_interests = context.user_data.get("interests", [])
        if interest_key in current_interests:
            current_interests.remove(interest_key)
        else:
            current_interests.append(interest_key)
        context.user_data["interests"] = current_interests
        await query.edit_message_reply_markup(reply_markup=await kb.get_interests_keyboard(current_interests))

    elif data == "interests_done":
        selected_interests = context.user_data.get("interests", [])
        if not selected_interests:
            await query.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.", show_alert=True)
            return

        user = await db.get_or_create_user(user_id)
        if "18+" in selected_interests and not user['unlocked_18plus']:
            if user['balance'] >= COST_FOR_18PLUS:
                await db.update_balance(user_id, -COST_FOR_18PLUS)
                await db.unlock_18plus(user_id)
            else:
                await query.message.edit_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ 18+ (–Ω—É–∂–Ω–æ {COST_FOR_18PLUS}). –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}.")
                return

        await db.update_user_interests(user_id, selected_interests)
        await db.update_user_status(user_id, 'waiting')
        await query.message.edit_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(selected_interests)}. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")

        partner_id = await db.find_partner(user_id, selected_interests)
        if partner_id:
            await db.create_chat(user_id, partner_id)
            await context.bot.send_message(user_id, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!", reply_markup=kb.get_chat_keyboard())
            await context.bot.send_message(partner_id, "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!", reply_markup=kb.get_chat_keyboard())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ---
    if user_id in ADMIN_IDS:
        if context.user_data.get('awaiting_ban_id'):
            try:
                target_id = int(text)
                await db.set_ban_status(target_id, True)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω.")
                await context.bot.send_message(target_id, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
            context.user_data.pop('awaiting_ban_id')
            await admin_command(update, context)
            return
        if context.user_data.get('awaiting_unban_id'):
            try:
                target_id = int(text)
                await db.set_ban_status(target_id, False)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
                await context.bot.send_message(target_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
            context.user_data.pop('awaiting_unban_id')
            await admin_command(update, context)
            return
        if context.user_data.get('awaiting_add_currency'):
            try:
                target_id, amount = map(int, text.split())
                new_balance = await db.update_balance(target_id, amount)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}.")
                await context.bot.send_message(target_id, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount} –º–æ–Ω–µ—Ç.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É.")
            context.user_data.pop('awaiting_add_currency')
            await admin_command(update, context)
            return
        if context.user_data.get('awaiting_remove_currency'):
            try:
                target_id, amount = map(int, text.split())
                new_balance = await db.update_balance(target_id, -amount)
                await update.message.reply_text(f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–ø–∏—Å–∞–Ω–æ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}.")
                await context.bot.send_message(target_id, f"üí∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∞–ª —É –≤–∞—Å {amount} –º–æ–Ω–µ—Ç.")
            except (ValueError, IndexError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É.")
            context.user_data.pop('awaiting_remove_currency')
            await admin_command(update, context)
            return

    # --- –û–ë–´–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    user = await db.get_or_create_user(user_id)
    is_admin = user_id in ADMIN_IDS

    if context.user_data.get("awaiting_admin_password"):
        if text.strip() == ADMIN_PASSWORD:
            ADMIN_IDS.add(user_id)
            await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.", reply_markup=kb.get_admin_reply_keyboard())
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        context.user_data.pop("awaiting_admin_password", None)
        return

    if user['is_banned']:
        await show_main_menu(user_id, context)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ReplyKeyboard ---
    if text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and is_admin:
        await admin_command(update, context)
        return
    if text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏" and is_admin:
        ADMIN_IDS.discard(user_id)
        await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=kb.get_main_menu_keyboard())
        return

    if user['status'] == 'in_chat':
        if text == "üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await end_chat_session(user_id, context, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
        elif text == "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
            await end_chat_session(user_id, context, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        else:
            await context.bot.send_message(user['partner_id'], text)
    else:
        if text == "üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            context.user_data["interests"] = []
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=await kb.get_interests_keyboard())
        elif text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å":
            await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç.")
        elif text == "üîó –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
            link = f"https://t.me/{context.bot.username}?start={user_id}"
            await update.message.reply_text(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user['referrals_count']} —á–µ–ª.")
        else:
            await show_main_menu(user_id, context, as_admin=is_admin)


async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await db.get_or_create_user(user_id)

    if user['status'] == 'in_chat':
        if user['balance'] >= COST_FOR_PHOTO:
            new_balance = await db.update_balance(user_id, -COST_FOR_PHOTO)
            if update.message.photo:
                await context.bot.send_photo(user['partner_id'], update.message.photo[-1].file_id)
            elif update.message.video:
                await context.bot.send_video(user['partner_id'], update.message.video.file_id)
            await update.message.reply_text(f"‚úÖ –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∏—Å–∞–Ω–æ {COST_FOR_PHOTO} –º–æ–Ω–µ—Ç. –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance}.")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ (–Ω—É–∂–Ω–æ {COST_FOR_PHOTO}).")
